<feed xmlns="http://www.w3.org/2005/Atom"><title>The Go Programming Language Blog</title><id>tag:blog.golang.org,2013:blog.golang.org</id><link rel="self" href="//blog.golang.org/feed.atom"></link><updated>2015-11-10T11:00:00+00:00</updated><entry><title>Six years of Go</title><id>tag:blog.golang.org,2013:blog.golang.org/6years</id><link rel="alternate" href="//blog.golang.org/6years"></link><published>2015-11-10T11:00:00+00:00</published><updated>2015-11-10T11:00:00+00:00</updated><author><name>Andrew Gerrand</name></author><summary type="html">Six years ago today the Go language was released as an open source project.&#xA;Since then, more than 780 contributors have made over 30,000 commits to the&#xA;project&amp;#39;s 22 repositories. The ecosystem continues to grow, with GitHub&#xA;reporting more than 90,000 Go repositories. And, offline, we see new Go events&#xA;and user groups pop up &lt;a href=&#34;https://blog.golang.org/gophercon2015&#34; target=&#34;_blank&#34;&gt;around&lt;/a&gt;&#xA;&lt;a href=&#34;http://blog.golang.org/gouk15&#34; target=&#34;_blank&#34;&gt;the&lt;/a&gt;&#xA;&lt;a href=&#34;http://blog.golang.org/gopherchina&#34; target=&#34;_blank&#34;&gt;world&lt;/a&gt; with regularity.&#xA;</summary><content type="html">&#xA;&#xA;  &#xA;  &#xA;    &#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    Six years ago today the Go language was released as an open source project.&#xA;&#xA;&#xA;    Since then, more than 780 contributors have made over 30,000 commits to the&#xA;&#xA;&#xA;    project&amp;#39;s 22 repositories. The ecosystem continues to grow, with GitHub&#xA;&#xA;&#xA;    reporting more than 90,000 Go repositories. And, offline, we see new Go events&#xA;&#xA;&#xA;    and user groups pop up &lt;a href=&#34;https://blog.golang.org/gophercon2015&#34; target=&#34;_blank&#34;&gt;around&lt;/a&gt;&#xA;&#xA;&#xA;    &lt;a href=&#34;http://blog.golang.org/gouk15&#34; target=&#34;_blank&#34;&gt;the&lt;/a&gt;&#xA;&#xA;&#xA;    &lt;a href=&#34;http://blog.golang.org/gopherchina&#34; target=&#34;_blank&#34;&gt;world&lt;/a&gt; with regularity.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;6years-gopher.png&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    In August we &lt;a href=&#34;https://blog.golang.org/go1.5&#34; target=&#34;_blank&#34;&gt;released Go 1.5&lt;/a&gt;, the most&#xA;&#xA;&#xA;    significant release since Go 1. It features a completely&#xA;&#xA;&#xA;    &lt;a href=&#34;https://golang.org/doc/go1.5#gc&#34; target=&#34;_blank&#34;&gt;redesigned garbage collector&lt;/a&gt; that makes&#xA;&#xA;&#xA;    the language more suitable for latency-sensitive applications; it marks the&#xA;&#xA;&#xA;    transition from a C-based compiler tool chain to one&#xA;&#xA;&#xA;    &lt;a href=&#34;https://golang.org/doc/go1.5#c&#34; target=&#34;_blank&#34;&gt;written entirely in Go&lt;/a&gt;; and it includes&#xA;&#xA;&#xA;    ports to &lt;a href=&#34;https://golang.org/doc/go1.5#ports&#34; target=&#34;_blank&#34;&gt;new architectures&lt;/a&gt;, with better&#xA;&#xA;&#xA;    support for ARM processors (the chips that power most smartphones).&#xA;&#xA;&#xA;    These improvements make Go better suited to a broader range of tasks, a trend&#xA;&#xA;&#xA;    that we hope will continue over the coming years.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    Improvements to tools continue to boost developer productivity.&#xA;&#xA;&#xA;    We introduced the &lt;a href=&#34;https://golang.org/cmd/trace/&#34; target=&#34;_blank&#34;&gt;execution tracer&lt;/a&gt; and the&#xA;&#xA;&#xA;    &amp;#34;&lt;a href=&#34;https://golang.org/cmd/go/#hdr-Show_documentation_for_package_or_symbol&#34; target=&#34;_blank&#34;&gt;go doc&lt;/a&gt;&amp;#34;&#xA;&#xA;&#xA;    command, as well as more enhancements to our various&#xA;&#xA;&#xA;    &lt;a href=&#34;https://talks.golang.org/2014/static-analysis.slide&#34; target=&#34;_blank&#34;&gt;static analysis tools&lt;/a&gt;.&#xA;&#xA;&#xA;    We are also working on an&#xA;&#xA;&#xA;    &lt;a href=&#34;https://groups.google.com/forum/#!topic/Golang-nuts/8oCSjAiKXUQ&#34; target=&#34;_blank&#34;&gt;official Go plugin for Sublime Text&lt;/a&gt;,&#xA;&#xA;&#xA;    with better support for other editors in the pipeline.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    Early next year we will release more improvements in Go 1.6, including &#xA;&#xA;&#xA;    HTTP/2 support for &lt;a href=&#34;https://golang.org/pkg/net/http/&#34; target=&#34;_blank&#34;&gt;net/http&lt;/a&gt; servers and&#xA;&#xA;&#xA;    clients, an official package vendoring mechanism, support for blocks in text&#xA;&#xA;&#xA;    and HTML templates, a memory sanitizer that checks both Go and C/C++ code, and&#xA;&#xA;&#xA;    the usual assortment of other improvements and fixes.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    This is the sixth time we have had the pleasure of writing a birthday blog post&#xA;&#xA;&#xA;    for Go, and we would not be doing so if not for the wonderful and passionate&#xA;&#xA;&#xA;    people in our community. The Go team would like to thank everyone who has&#xA;&#xA;&#xA;    contributed code, written an open source library, authored a blog post, helped&#xA;&#xA;&#xA;    a new gopher, or just given Go a try. Without you, Go would not be as complete,&#xA;&#xA;&#xA;    useful, or successful as it is today. Thank you, and celebrate!&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;    &#xA;  &#xA;&#xA;</content></entry><entry><title>GolangUK 2015</title><id>tag:blog.golang.org,2013:blog.golang.org/gouk15</id><link rel="alternate" href="//blog.golang.org/gouk15"></link><published>2015-10-09T11:00:00+00:00</published><updated>2015-10-09T11:00:00+00:00</updated><author><name>Francesc Campoy</name></author><summary type="html">On August 21st the Go community gathered in London for the first edition of&#xA;&lt;a href=&#34;https://golanguk.com&#34; target=&#34;_blank&#34;&gt;Golang UK&lt;/a&gt;. The conference featured two parallel&#xA;tracks and nearly 400 gophers attended.&#xA;</summary><content type="html">&#xA;&#xA;  &#xA;  &#xA;    &#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    On August 21st the Go community gathered in London for the first edition of&#xA;&#xA;&#xA;    &lt;a href=&#34;https://golanguk.com&#34; target=&#34;_blank&#34;&gt;Golang UK&lt;/a&gt;. The conference featured two parallel&#xA;&#xA;&#xA;    tracks and nearly 400 gophers attended.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;gouk15/gouk.jpg&#34; height=&#34;300&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    The conference started with the opening keynote by &lt;a href=&#34;https://twitter.com/calavera&#34; target=&#34;_blank&#34;&gt;David Calavera&lt;/a&gt;&#xA;&#xA;&#xA;    called Crossing the Language Chasm (&lt;a href=&#34;https://www.youtube.com/watch?v=JPVRnEZ4v_w&amp;amp;list=PLDWZ5uzn69ezRJYeWxYNRMYebvf8DerHd&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;)&#xA;&#xA;&#xA;    and continued with two concurrently executed &lt;a href=&#34;http://golanguk.com/schedule/&#34; target=&#34;_blank&#34;&gt;tracks&lt;/a&gt;.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    Main track:&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &lt;ul&gt;&#xA;  &#xA;    &lt;li&gt;Stupid Gopher Tricks, by &lt;a href=&#34;https://twitter.com/enneff&#34; target=&#34;_blank&#34;&gt;Andrew Gerrand&lt;/a&gt; (&lt;a href=&#34;https://www.youtube.com/watch?v=UECh7X07m6E&amp;amp;list=PLDWZ5uzn69ezRJYeWxYNRMYebvf8DerHd&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;Complex Concurrency Patterns in Go, by &lt;a href=&#34;https://twitter.com/eapache&#34; target=&#34;_blank&#34;&gt;Evan Huus&lt;/a&gt; (&lt;a href=&#34;https://www.youtube.com/watch?v=2HOO5gIgyMg&amp;amp;list=PLDWZ5uzn69ezRJYeWxYNRMYebvf8DerHd&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;Code Analysis [no reading required], by &lt;a href=&#34;https://twitter.com/francesc&#34; target=&#34;_blank&#34;&gt;Francesc Campoy&lt;/a&gt; (&lt;a href=&#34;https://www.youtube.com/watch?v=oorX84tBMqo&amp;amp;list=PLDWZ5uzn69ezRJYeWxYNRMYebvf8DerHd&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;Go kit: a toolkit for microservices &lt;a href=&#34;https://twitter.com/peterbourgon&#34; target=&#34;_blank&#34;&gt;Peter Bourgon&lt;/a&gt; (&lt;a href=&#34;https://www.youtube.com/watch?v=aL6sd4d4hxk&amp;amp;list=PLDWZ5uzn69ezRJYeWxYNRMYebvf8DerHd&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;Dependency Management Conundrum, by &lt;a href=&#34;https://twitter.com/goinggodotnet&#34; target=&#34;_blank&#34;&gt;William Kennedy&lt;/a&gt; (&lt;a href=&#34;https://www.youtube.com/watch?v=CdhucJShJU8&amp;amp;list=PLDWZ5uzn69ezRJYeWxYNRMYebvf8DerHd&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;  &lt;/ul&gt;&#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    Side track:&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &lt;ul&gt;&#xA;  &#xA;    &lt;li&gt;Building APIs, by &lt;a href=&#34;https://twitter.com/matryer&#34; target=&#34;_blank&#34;&gt;Mat Ryer&lt;/a&gt; (&lt;a href=&#34;https://www.youtube.com/watch?v=tIm8UkSf6RA&amp;amp;list=PLDWZ5uzn69ezRJYeWxYNRMYebvf8DerHd&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;Building a Bank with Go, by &lt;a href=&#34;https://twitter.com/mattheath&#34; target=&#34;_blank&#34;&gt;Matt Heath&lt;/a&gt; (&lt;a href=&#34;https://www.youtube.com/watch?v=cFJkLfujOts&amp;amp;list=PLDWZ5uzn69ezRJYeWxYNRMYebvf8DerHd&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;CockroachDB: Make Data Easy, by &lt;a href=&#34;https://twitter.com/bendarnell&#34; target=&#34;_blank&#34;&gt;Ben Darnell&lt;/a&gt; (&lt;a href=&#34;https://www.youtube.com/watch?v=33oqpLmQ3LE&amp;amp;list=PLDWZ5uzn69ezRJYeWxYNRMYebvf8DerHd&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;Understanding memory allocation in Go, by &lt;a href=&#34;https://twitter.com/DeanElbaz&#34; target=&#34;_blank&#34;&gt;Dean Elbaz&lt;/a&gt; (&lt;a href=&#34;https://www.youtube.com/watch?v=zjoieOpy5hE&amp;amp;list=PLDWZ5uzn69ezRJYeWxYNRMYebvf8DerHd&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;Whispered Secrets, by &lt;a href=&#34;https://twitter.com/feyeleanor&#34; target=&#34;_blank&#34;&gt;Eleanor McHugh&lt;/a&gt; (&lt;a href=&#34;https://www.youtube.com/watch?v=ViBRx-F4Z2U&amp;amp;list=PLDWZ5uzn69ezRJYeWxYNRMYebvf8DerHd&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;  &lt;/ul&gt;&#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    Finally &lt;a href=&#34;https://twitter.com/dgryski&#34; target=&#34;_blank&#34;&gt;Damian Gryski&lt;/a&gt; took the stage for the&#xA;&#xA;&#xA;    closing keynote (&lt;a href=&#34;https://www.youtube.com/watch?v=IiSyFc10Jj0&amp;amp;list=PLDWZ5uzn69ezRJYeWxYNRMYebvf8DerHd&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;),&#xA;&#xA;&#xA;    giving an overview of how the Go community has evolved over time and hinting&#xA;&#xA;&#xA;    to what the future might look like.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    On the day before the conference &lt;a href=&#34;https://twitter.com/goinggodotnet&#34; target=&#34;_blank&#34;&gt;William Kennedy&lt;/a&gt;&#xA;&#xA;&#xA;    gave a full day Go workshop.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    It was a great conference, so congratulations to the organizers and see you next year in London!&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;    &#xA;  &#xA;&#xA;</content></entry><entry><title>Go GC: Prioritizing low latency and simplicity</title><id>tag:blog.golang.org,2013:blog.golang.org/go15gc</id><link rel="alternate" href="//blog.golang.org/go15gc"></link><published>2015-08-31T11:00:00+00:00</published><updated>2015-08-31T11:00:00+00:00</updated><author><name>Richard Hudson</name></author><summary type="html">Go is building a garbage collector (GC) not only for 2015 but for 2025 and&#xA;beyond: A GC that supports today’s software development and scales along with&#xA;new software and hardware throughout the next decade. Such a future has no&#xA;place for stop-the-world GC pauses, which have been an impediment to broader&#xA;uses of safe and secure languages such as Go.&#xA;</summary><content type="html">&#xA;&#xA;  &#xA;  &#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_1.&#34;&gt;The Setup&lt;/h4&gt;&#xA;  &#xA;  &#xA;  &lt;p&gt;&#xA;    Go is building a garbage collector (GC) not only for 2015 but for 2025 and&#xA;&#xA;&#xA;    beyond: A GC that supports today’s software development and scales along with&#xA;&#xA;&#xA;    new software and hardware throughout the next decade. Such a future has no&#xA;&#xA;&#xA;    place for stop-the-world GC pauses, which have been an impediment to broader&#xA;&#xA;&#xA;    uses of safe and secure languages such as Go.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Go 1.5, the first glimpse of this future, achieves GC latencies well below the&#xA;&#xA;&#xA;    10 millisecond goal we set a year ago. We presented some impressive numbers&#xA;&#xA;&#xA;    in &lt;a href=&#34;https://talks.golang.org/2015/go-gc.pdf&#34; target=&#34;_blank&#34;&gt;a talk at Gophercon&lt;/a&gt;.&#xA;&#xA;&#xA;    The latency improvements have generated a lot of attention;&#xA;&#xA;&#xA;    Robin Verlangen’s blog post&#xA;&#xA;&#xA;    &lt;a href=&#34;https://medium.com/@robin.verlangen/billions-of-request-per-day-meet-go-1-5-362bfefa0911&#34; target=&#34;_blank&#34;&gt;&lt;i&gt;Billions of requests per day meet Go 1.5&lt;/i&gt;&lt;/a&gt;&#xA;&#xA;&#xA;    validates our direction with end to end results.&#xA;&#xA;&#xA;    We also particularly enjoyed&#xA;&#xA;&#xA;    &lt;a href=&#34;https://twitter.com/inconshreveable/status/620650786662555648&#34; target=&#34;_blank&#34;&gt;Alan Shreve’s production server graphs&lt;/a&gt;&#xA;&#xA;&#xA;    and his &amp;#34;Holy 85% reduction&amp;#34; comment.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Today 16 gigabytes of RAM costs $100 and CPUs come with many cores, each with&#xA;&#xA;&#xA;    multiple hardware threads. In a decade this hardware will seem quaint but the&#xA;&#xA;&#xA;    software being built in Go today will need to scale to meet expanding needs and&#xA;&#xA;&#xA;    the next big thing. Given that hardware will provide the power to increase&#xA;&#xA;&#xA;    throughput, Go’s garbage collector is being designed to favor low latency and&#xA;&#xA;&#xA;    tuning via only a single knob. Go 1.5 is the first big step down this path and&#xA;&#xA;&#xA;    these first steps will forever influence Go and the applications it best&#xA;&#xA;&#xA;    supports. This blog post gives a high-level overview of what we have done for&#xA;&#xA;&#xA;    the Go 1.5 collector.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_2.&#34;&gt;The Embellishment&lt;/h4&gt;&#xA;  &#xA;  &#xA;  &lt;p&gt;&#xA;    To create a garbage collector for the next decade, we turned to an algorithm&#xA;&#xA;&#xA;    from decades ago. Go&amp;#39;s new garbage collector is a &lt;i&gt;concurrent&lt;/i&gt;, &lt;i&gt;tri-color&lt;/i&gt;,&#xA;&#xA;&#xA;    &lt;i&gt;mark-sweep&lt;/i&gt; collector, an idea first proposed by&#xA;&#xA;&#xA;    &lt;a href=&#34;http://dl.acm.org/citation.cfm?id=359655&#34; target=&#34;_blank&#34;&gt;Dijkstra in 1978&lt;/a&gt;.&#xA;&#xA;&#xA;    This is a deliberate divergence from most &amp;#34;enterprise&amp;#34; grade garbage collectors&#xA;&#xA;&#xA;    of today, and one that we believe is well suited to the properties of modern&#xA;&#xA;&#xA;    hardware and the latency requirements of modern software.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    In a tri-color collector, every object is either white, grey, or black and we&#xA;&#xA;&#xA;    view the heap as a graph of connected objects. At the start of a GC cycle all&#xA;&#xA;&#xA;    objects are white. The GC visits all &lt;i&gt;roots&lt;/i&gt;, which are objects directly&#xA;&#xA;&#xA;    accessible by the application such as globals and things on the stack, and&#xA;&#xA;&#xA;    colors these grey. The GC then chooses a grey object, blackens it, and then&#xA;&#xA;&#xA;    scans it for pointers to other objects. When this scan finds a pointer to a&#xA;&#xA;&#xA;    white object, it turns that object grey. This process repeats until there are&#xA;&#xA;&#xA;    no more grey objects. At this point, white objects are known to be unreachable&#xA;&#xA;&#xA;    and can be reused.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    This all happens concurrently with the application, known as the &lt;i&gt;mutator&lt;/i&gt;,&#xA;&#xA;&#xA;    changing pointers while the collector is running. Hence, the mutator must&#xA;&#xA;&#xA;    maintain the invariant that no black object points to a white object, lest the&#xA;&#xA;&#xA;    garbage collector lose track of an object installed in a part of the heap it&#xA;&#xA;&#xA;    has already visited. Maintaining this invariant is the job of the&#xA;&#xA;&#xA;    &lt;i&gt;write barrier&lt;/i&gt;, which is a small function run by the mutator whenever a&#xA;&#xA;&#xA;    pointer in the heap is modified. Go’s write barrier colors the now-reachable&#xA;&#xA;&#xA;    object grey if it is currently white, ensuring that the garbage collector will&#xA;&#xA;&#xA;    eventually scan it for pointers.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Deciding when the job of finding all grey objects is done is subtle and can be&#xA;&#xA;&#xA;    expensive and complicated if we want to avoid blocking the mutators. To keep&#xA;&#xA;&#xA;    things simple Go 1.5 does as much work as it can concurrently and then briefly&#xA;&#xA;&#xA;    stops the world to inspect all potential sources of grey objects. Finding the&#xA;&#xA;&#xA;    sweet spot between the time needed for this final stop-the-world and the total&#xA;&#xA;&#xA;    amount of work that this GC does is a major deliverable for Go 1.6.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Of course the devil is in the details. When do we start a GC cycle? What&#xA;&#xA;&#xA;    metrics do we use to make that decision? How should the GC interact with the Go&#xA;&#xA;&#xA;    scheduler? How do we pause a mutator thread long enough to scan its stack?&#xA;&#xA;&#xA;     How do we represent white, grey, and black so we can efficiently find and scan&#xA;&#xA;&#xA;    grey objects? How do we know where the roots are? How do we know where in an&#xA;&#xA;&#xA;    object pointers are located? How do we minimize memory fragmentation? How do we&#xA;&#xA;&#xA;    deal with cache performance issues? How big should the heap be? And on and on,&#xA;&#xA;&#xA;    some related to allocation, some to finding reachable objects, some related to&#xA;&#xA;&#xA;    scheduling, but many related to performance. Low-level discussions of each of&#xA;&#xA;&#xA;    these areas are beyond the scope of this blog post.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    At a higher level, one approach to solving performance problems is to add GC&#xA;&#xA;&#xA;    knobs, one for each performance issue. The programmer can then turn the knobs&#xA;&#xA;&#xA;    in search of appropriate settings for their application. The downside is that&#xA;&#xA;&#xA;    after a decade with one or two new knobs each year you end up with the GC Knobs&#xA;&#xA;&#xA;    Turner Employment Act. Go is not going down that path. Instead we provide a&#xA;&#xA;&#xA;    single knob, called GOGC. This value controls the total size of the heap&#xA;&#xA;&#xA;    relative to the size of reachable objects. The default value of 100 means that&#xA;&#xA;&#xA;    total heap size is now 100% bigger than (i.e., twice) the size of the reachable&#xA;&#xA;&#xA;    objects after the last collection. 200 means total heap size is 200% bigger&#xA;&#xA;&#xA;    than (i.e., three times) the size of the reachable objects. If you want to&#xA;&#xA;&#xA;    lower the total time spent in GC, increase GOGC. If you want to trade more GC&#xA;&#xA;&#xA;    time for less memory, lower GOGC.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    More importantly as RAM doubles with the next generation of hardware, simply&#xA;&#xA;&#xA;    doubling GOGC will halve the number of GC cycles. On the other hand since GOGC&#xA;&#xA;&#xA;    is based on reachable object size, doubling the load by doubling the reachable&#xA;&#xA;&#xA;    objects requires no retuning. The application just scales.&#xA;&#xA;&#xA;    Furthermore, unencumbered by ongoing support for dozens of knobs, the runtime&#xA;&#xA;&#xA;    team can focus on improving the runtime based on feedback from real customer&#xA;&#xA;&#xA;    applications.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_3.&#34;&gt;The Punchline&lt;/h4&gt;&#xA;  &#xA;  &#xA;  &lt;p&gt;&#xA;    Go 1.5’s GC ushers in a future where stop-the-world pauses are no longer a&#xA;&#xA;&#xA;    barrier to moving to a safe and secure language. It is a future where&#xA;&#xA;&#xA;    applications scale effortlessly along with hardware and as hardware becomes&#xA;&#xA;&#xA;    more powerful the GC will not be an impediment to better, more scalable&#xA;&#xA;&#xA;    software. It’s a good place to be for the next decade and beyond.&#xA;&#xA;&#xA;    For more details about the 1.5 GC and how we eliminated latency issues see the&#xA;&#xA;&#xA;    &lt;a href=&#34;https://www.youtube.com/watch?v=aiv1JOfMjm0&#34; target=&#34;_blank&#34;&gt;Go GC: Latency Problem Solved presentation&lt;/a&gt;&#xA;&#xA;&#xA;    or &lt;a href=&#34;https://talks.golang.org/2015/go-gc.pdf&#34; target=&#34;_blank&#34;&gt;the slides&lt;/a&gt;.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;&#xA;    &#xA;  &#xA;&#xA;</content></entry><entry><title>Go 1.5 is released</title><id>tag:blog.golang.org,2013:blog.golang.org/go1.5</id><link rel="alternate" href="//blog.golang.org/go1.5"></link><published>2015-08-19T11:00:00+00:00</published><updated>2015-08-19T11:00:00+00:00</updated><author><name>Andrew Gerrand</name></author><summary type="html">Today the Go project is proud to release Go 1.5,&#xA;the sixth major stable release of Go.&#xA;</summary><content type="html">&#xA;&#xA;  &#xA;  &#xA;    &#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    Today the Go project is proud to release Go 1.5,&#xA;&#xA;&#xA;    the sixth major stable release of Go.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    This release includes significant changes to the implementation.&#xA;&#xA;&#xA;    The compiler tool chain was &lt;a href=&#34;https://golang.org/doc/go1.5#c&#34; target=&#34;_blank&#34;&gt;translated from C to Go&lt;/a&gt;,&#xA;&#xA;&#xA;    removing the last vestiges of C code from the Go code base.&#xA;&#xA;&#xA;    The garbage collector was &lt;a href=&#34;https://golang.org/doc/go1.5#gc&#34; target=&#34;_blank&#34;&gt;completely redesigned&lt;/a&gt;,&#xA;&#xA;&#xA;    yielding a &lt;a href=&#34;https://talks.golang.org/2015/go-gc.pdf&#34; target=&#34;_blank&#34;&gt;dramatic reduction&lt;/a&gt;&#xA;&#xA;&#xA;    in garbage collection pause times.&#xA;&#xA;&#xA;    Related improvements to the scheduler allowed us to change the default&#xA;&#xA;&#xA;    &lt;a href=&#34;https://golang.org/pkg/runtime/#GOMAXPROCS&#34; target=&#34;_blank&#34;&gt;GOMAXPROCS&lt;/a&gt; value&#xA;&#xA;&#xA;    (the number of concurrently executing goroutines)&#xA;&#xA;&#xA;    from 1 to the number of logical CPUs.&#xA;&#xA;&#xA;    Changes to the linker enable distributing Go packages as shared libraries to&#xA;&#xA;&#xA;    link into Go programs, and building Go packages into archives or shared&#xA;&#xA;&#xA;    libraries that may be linked into or loaded by C programs&#xA;&#xA;&#xA;    (&lt;a href=&#34;https://golang.org/s/execmodes&#34; target=&#34;_blank&#34;&gt;design doc&lt;/a&gt;).&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    The release also includes &lt;a href=&#34;https://golang.org/doc/go1.5#go_command&#34; target=&#34;_blank&#34;&gt;improvements to the developer tools&lt;/a&gt;.&#xA;&#xA;&#xA;    Support for &lt;a href=&#34;https://golang.org/s/go14internal&#34; target=&#34;_blank&#34;&gt;&amp;#34;internal&amp;#34; packages&lt;/a&gt;&#xA;&#xA;&#xA;    permits sharing implementation details between packages.&#xA;&#xA;&#xA;    &lt;a href=&#34;https://golang.org/s/go15vendor&#34; target=&#34;_blank&#34;&gt;Experimental support&lt;/a&gt; for &amp;#34;vendoring&amp;#34;&#xA;&#xA;&#xA;    external dependencies is a step toward a standard mechanism for managing&#xA;&#xA;&#xA;    dependencies in Go programs.&#xA;&#xA;&#xA;    The new &amp;#34;&lt;a href=&#34;https://golang.org/cmd/trace/&#34; target=&#34;_blank&#34;&gt;go tool trace&lt;/a&gt;&amp;#34; command enables the&#xA;&#xA;&#xA;    visualisation of  program traces generated by new tracing infrastructure in the&#xA;&#xA;&#xA;    runtime.&#xA;&#xA;&#xA;    The new &amp;#34;&lt;a href=&#34;https://golang.org/cmd/go/#hdr-Show_documentation_for_package_or_symbol&#34; target=&#34;_blank&#34;&gt;go doc&lt;/a&gt;&amp;#34;&#xA;&#xA;&#xA;    command provides an improved command-line interface for viewing Go package documentation.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    There are also several &lt;a href=&#34;https://golang.org/doc/go1.5#ports&#34; target=&#34;_blank&#34;&gt;new operating system and architecture ports&lt;/a&gt;.&#xA;&#xA;&#xA;    The more mature new ports are darwin/arm,&#xA;&#xA;&#xA;    darwin/arm64 (Apple&amp;#39;s iPhone and iPad devices),&#xA;&#xA;&#xA;    and linux/arm64.&#xA;&#xA;&#xA;    There is also experimental support for ppc64 and ppc64le&#xA;&#xA;&#xA;    (IBM 64-bit PowerPC, big and little endian).&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    The new darwin/arm64 port and external linking features fuel the&#xA;&#xA;&#xA;    &lt;a href=&#34;https://godoc.org/golang.org/x/mobile&#34; target=&#34;_blank&#34;&gt;Go mobile project&lt;/a&gt;, an experiment to&#xA;&#xA;&#xA;    see how Go might be used for building apps on Android and iOS devices.&#xA;&#xA;&#xA;    (The Go mobile work itself is not part of this release.)&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    The only language change is very minor,&#xA;&#xA;&#xA;    &lt;a href=&#34;https://golang.org/doc/go1.5#language&#34; target=&#34;_blank&#34;&gt;the lifting of a restriction in the map literal syntax&lt;/a&gt;&#xA;&#xA;&#xA;    to make them more succinct and consistent with slice literals.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    The standard library saw many additions and improvements, too.&#xA;&#xA;&#xA;    The flag package now shows &lt;a href=&#34;https://golang.org/doc/go1.5#flag&#34; target=&#34;_blank&#34;&gt;cleaner usage messages&lt;/a&gt;.&#xA;&#xA;&#xA;    The math/big package now provides a &lt;a href=&#34;https://golang.org/pkg/math/big/#Float&#34; target=&#34;_blank&#34;&gt;Float&lt;/a&gt;&#xA;&#xA;&#xA;    type for computing with arbitrary-precision floating point numbers.&#xA;&#xA;&#xA;    An &lt;a href=&#34;https://golang.org/doc/go1.5#net&#34; target=&#34;_blank&#34;&gt;improvement&lt;/a&gt; to the DNS resolver on&#xA;&#xA;&#xA;    Linux and BSD systems has removed the cgo requirement for programs that do name&#xA;&#xA;&#xA;    lookups.&#xA;&#xA;&#xA;    The &lt;a href=&#34;https://golang.org/pkg/go/types/&#34; target=&#34;_blank&#34;&gt;go/types&lt;/a&gt; package has been&#xA;&#xA;&#xA;    &lt;a href=&#34;https://golang.org/doc/go1.5#go_types&#34; target=&#34;_blank&#34;&gt;moved&lt;/a&gt; to the standard library from&#xA;&#xA;&#xA;    the &lt;a href=&#34;https://godoc.org/golang.org/x/tools&#34; target=&#34;_blank&#34;&gt;golang.org/x/tools&lt;/a&gt; repository.&#xA;&#xA;&#xA;    (The new &lt;a href=&#34;https://golang.org/pkg/go/constant/&#34; target=&#34;_blank&#34;&gt;go/constant&lt;/a&gt; and&#xA;&#xA;&#xA;    &lt;a href=&#34;https://golang.org/pkg/go/importer/&#34; target=&#34;_blank&#34;&gt;go/importer&lt;/a&gt; packages are also a result&#xA;&#xA;&#xA;    of this move.)&#xA;&#xA;&#xA;    The reflect package has added the&#xA;&#xA;&#xA;    &lt;a href=&#34;https://golang.org/pkg/reflect/#ArrayOf&#34; target=&#34;_blank&#34;&gt;ArrayOf&lt;/a&gt; and&#xA;&#xA;&#xA;    &lt;a href=&#34;https://golang.org/pkg/reflect/#FuncOf&#34; target=&#34;_blank&#34;&gt;FuncOf&lt;/a&gt; functions, analogous to the&#xA;&#xA;&#xA;    existing &lt;a href=&#34;https://golang.org/pkg/reflect/#SliceOf&#34; target=&#34;_blank&#34;&gt;SliceOf&lt;/a&gt; function.&#xA;&#xA;&#xA;    And, of course, there is the usual&#xA;&#xA;&#xA;    &lt;a href=&#34;https://golang.org/doc/go1.5#minor_library_changes&#34; target=&#34;_blank&#34;&gt;list of smaller fixes and improvements&lt;/a&gt;.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    For the full story, see the &lt;a href=&#34;https://golang.org/doc/go1.5&#34; target=&#34;_blank&#34;&gt;detailed release notes&lt;/a&gt;.&#xA;&#xA;&#xA;    Or if you just can&amp;#39;t wait to get started,&#xA;&#xA;&#xA;    head over to the &lt;a href=&#34;https://golang.org/dl/&#34; target=&#34;_blank&#34;&gt;downloads page&lt;/a&gt; to get Go 1.5 now.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;    &#xA;  &#xA;&#xA;</content></entry><entry><title>GopherCon 2015 Roundup</title><id>tag:blog.golang.org,2013:blog.golang.org/gophercon2015</id><link rel="alternate" href="//blog.golang.org/gophercon2015"></link><published>2015-07-28T11:00:00+00:00</published><updated>2015-07-28T11:00:00+00:00</updated><author><name>Andrew Gerrand</name></author><summary type="html">A few weeks ago, Go programmers from around the world descended on Denver,&#xA;Colorado for GopherCon 2015. The two-day, single-track conference attracted&#xA;more than 1,250 attendees—nearly double last year&amp;#39;s number—and featured 22&#xA;talks presented by Go community members.&#xA;</summary><content type="html">&#xA;&#xA;  &#xA;  &#xA;    &#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    A few weeks ago, Go programmers from around the world descended on Denver,&#xA;&#xA;&#xA;    Colorado for GopherCon 2015. The two-day, single-track conference attracted&#xA;&#xA;&#xA;    more than 1,250 attendees—nearly double last year&amp;#39;s number—and featured 22&#xA;&#xA;&#xA;    talks presented by Go community members.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;gophercon2015.jpg&#34; width=&#34;550&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;      &#xA;        &lt;p&gt;&#xA;&lt;small&gt;The Cowboy Gopher (a toy given to each attendee) watches over the ranch.&lt;br&gt;&#xA;&lt;i&gt;Photograph by &lt;a href=&#34;https://twitter.com/nathany/status/619861336399351808&#34;&gt;Nathan Youngman&lt;/a&gt;. Gopher by Renee French.&lt;/i&gt;&#xA;&lt;/small&gt;&#xA;&lt;/p&gt;&#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    Today the organizers have posted the videos online so you can now enjoy the&#xA;&#xA;&#xA;    conference from afar:&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    &lt;a href=&#34;http://gophercon.com/schedule/8july/&#34; target=&#34;_blank&#34;&gt;Day 1&lt;/a&gt;:&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &lt;ul&gt;&#xA;  &#xA;    &lt;li&gt;Go, Open Source, Community — Russ Cox (&lt;a href=&#34;https://www.youtube.com/watch?v=XvZOdpd_9tc&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;) (&lt;a href=&#34;http://blog.golang.org/open-source&#34; target=&#34;_blank&#34;&gt;text&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;Go kit: A Standard Library for Distributed Programming — Peter Bourgon (&lt;a href=&#34;https://www.youtube.com/watch?v=1AjaZi4QuGo&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;) (&lt;a href=&#34;https://github.com/gophercon/2015-talks/blob/master/Go%20kit/go-kit.pdf&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;Delve Into Go — Derek Parker (&lt;a href=&#34;https://www.youtube.com/watch?v=InG72scKPd4&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;) (&lt;a href=&#34;http://go-talks.appspot.com/github.com/derekparker/talks/gophercon-2015/delve-into-go.slide&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;How a complete beginner learned Go as her first backend language in 5 weeks — Audrey Lim (&lt;a href=&#34;https://www.youtube.com/watch?v=fZh8uCInEfw&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;) (&lt;a href=&#34;https://github.com/gophercon/2015-talks/blob/master/Audrey%20Lim%20-%20How%20a%20Complete%20Beginner%20Picked%20Up%20Go%20as%20Her%20First%20Backend%20Language%20in%205%20weeks/audreylim_slides.pdf&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;A Practical Guide to Preventing Deadlocks and Leaks in Go — Richard Fliam (&lt;a href=&#34;https://www.youtube.com/watch?v=3EW1hZ8DVyw&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;Go GC: Solving the Latency Problem — Rick Hudson (&lt;a href=&#34;https://www.youtube.com/watch?v=aiv1JOfMjm0&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;) (&lt;a href=&#34;http://talks.golang.org/2015/go-gc.pdf&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;Simplicity and Go — Katherine Cox-Buday (&lt;a href=&#34;https://www.youtube.com/watch?v=S6mEo_FHZ5Y&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;) (&lt;a href=&#34;https://github.com/gophercon/2015-talks/blob/master/Katherine%20Cox-Buday:%20Simplicity%20%26%20Go/Simplicity%20%26%20Go.pdf&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;Rebuilding Parse.com in Go - an opinionated rewrite — Abhishek Kona (&lt;a href=&#34;https://www.youtube.com/watch?v=_f9LS-OWfeA&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;) (&lt;a href=&#34;https://github.com/gophercon/2015-talks/blob/master/Abhishek%20Kona%20Rewriting%20Parse%20in%20GO/myslides.pdf&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;Prometheus: Designing and Implementing a Modern Monitoring Solution in Go — Björn Rabenstein (&lt;a href=&#34;https://www.youtube.com/watch?v=1V7eJ0jN8-E&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;) (&lt;a href=&#34;https://github.com/gophercon/2015-talks/blob/master/Bj%C3%B6rn%20Rabenstein%20-%20Prometheus/slides.pdf&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;What Could Go Wrong? — Kevin Cantwell (&lt;a href=&#34;https://www.youtube.com/watch?v=VC3QXZ-x5yI&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;The Roots of Go — Baishampayan Ghose (&lt;a href=&#34;https://www.youtube.com/watch?v=0hPOopcJ8-E&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;) (&lt;a href=&#34;https://speakerdeck.com/bg/the-roots-of-go&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;  &lt;/ul&gt;&#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    &lt;a href=&#34;http://gophercon.com/schedule/9july/&#34; target=&#34;_blank&#34;&gt;Day 2&lt;/a&gt;:&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &lt;ul&gt;&#xA;  &#xA;    &lt;li&gt;The Evolution of Go — Robert Griesemer (&lt;a href=&#34;https://www.youtube.com/watch?v=0ReKdcpNyQg&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;) (&lt;a href=&#34;http://talks.golang.org/2015/gophercon-goevolution.slide&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;Static Code Analysis Using SSA — Ben Johnson (&lt;a href=&#34;https://www.youtube.com/watch?v=D2-gaMvWfQY&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;) (&lt;a href=&#34;https://speakerdeck.com/benbjohnson/static-code-analysis-using-ssa&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;Go on Mobile — Hana Kim (&lt;a href=&#34;https://www.youtube.com/watch?v=sQ6-HyPxHKg&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;) (&lt;a href=&#34;http://talks.golang.org/2015/gophercon-go-on-mobile.slide&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;Go Dynamic Tools — Dmitry Vyukov (&lt;a href=&#34;https://www.youtube.com/watch?v=a9xrxRsIbSU&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;) (&lt;a href=&#34;http://talks.golang.org/2015/dynamic-tools.slide&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;Embrace the Interface — Tomás Senart (&lt;a href=&#34;https://www.youtube.com/watch?v=xyDkyFjzFVc&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;) (&lt;a href=&#34;https://github.com/gophercon/2015-talks/blob/master/Tom%C3%A1s%20Senart%20-%20Embrace%20the%20Interface/ETI.pdf&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;Uptime: Building Resilient Services with Go — Blake Caldwell (&lt;a href=&#34;https://www.youtube.com/watch?v=PyBJQA4clfc&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;) (&lt;a href=&#34;https://github.com/gophercon/2015-talks/blob/master/Blake%20Caldwell%20-%20Uptime:%20Building%20Resilient%20Services%20with%20Go/2015-GopherCon-Talk-Uptime.pdf&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;Cayley: Building a Graph Database — Barak Michener (&lt;a href=&#34;https://www.youtube.com/watch?v=-9kWbPmSyCI&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;) (&lt;a href=&#34;https://github.com/gophercon/2015-talks/blob/master/Barak%20Michener%20-%20Cayley:%20Building%20a%20Graph%20Database/Cayley%20-%20Building%20a%20Graph%20Database.pdf&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;Code Generation For The Sake Of Consistency — Sarah Adams (&lt;a href=&#34;https://www.youtube.com/watch?v=kGAgHwfjg1s&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;The Many Faces of Struct Tags — Sam Helman and Kyle Erf (&lt;a href=&#34;https://www.youtube.com/watch?v=_SCRvMunkdA&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;) (&lt;a href=&#34;https://github.com/gophercon/2015-talks/blob/master/Sam%20Helman%20%26%20Kyle%20Erf%20-%20The%20Many%20Faces%20of%20Struct%20Tags/StructTags.pdf&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;Betting the Company on Go and Winning — Kelsey Hightower (&lt;a href=&#34;https://www.youtube.com/watch?v=wqVbLlHqAeY&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;How Go Was Made — Andrew Gerrand (&lt;a href=&#34;https://www.youtube.com/watch?v=0ht89TxZZnk&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;) (&lt;a href=&#34;http://talks.golang.org/2015/how-go-was-made.slide&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;&#xA;  &#xA;  &lt;/ul&gt;&#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    The &lt;a href=&#34;http://gophercon.com/schedule/10july/&#34; target=&#34;_blank&#34;&gt;hack day&lt;/a&gt; was also a ton of fun,&#xA;&#xA;&#xA;    with hours of &lt;a href=&#34;https://www.youtube.com/playlist?list=PL2ntRZ1ySWBeHqlHM8DmvS8axgbrpvF9b&#34; target=&#34;_blank&#34;&gt;lightning talks&lt;/a&gt; and a range of activities from programming robots&#xA;&#xA;&#xA;    to a Magic: the Gathering tournament.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    Huge thanks to the event organizers Brian Ketelsen and Eric St. Martin and&#xA;&#xA;&#xA;    their production team, the sponsors, the speakers, and the attendees for making&#xA;&#xA;&#xA;    this such a fun and action-packed conference. Hope to see you there next year!&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;    &#xA;  &#xA;&#xA;</content></entry><entry><title>Go, Open Source, Community</title><id>tag:blog.golang.org,2013:blog.golang.org/open-source</id><link rel="alternate" href="//blog.golang.org/open-source"></link><published>2015-07-08T11:00:00+00:00</published><updated>2015-07-08T11:00:00+00:00</updated><author><name>Russ Cox</name></author><summary type="html">[This is the text of my opening keynote at Gophercon 2015.&#xA;&lt;a href=&#34;https://www.youtube.com/watch?v=XvZOdpd_9tc&#34; target=&#34;_blank&#34;&gt;The video is available here&lt;/a&gt;.]&#xA;</summary><content type="html">&#xA;&#xA;  &#xA;  &#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_1.&#34;&gt;Welcome&lt;/h4&gt;&#xA;  &#xA;  &#xA;  &lt;p&gt;&#xA;    [This is the text of my opening keynote at Gophercon 2015.&#xA;&#xA;&#xA;    &lt;a href=&#34;https://www.youtube.com/watch?v=XvZOdpd_9tc&#34; target=&#34;_blank&#34;&gt;The video is available here&lt;/a&gt;.]&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Thank you all for traveling to Denver to be here,&#xA;&#xA;&#xA;    and thank you to everyone watching on video.&#xA;&#xA;&#xA;    If this is your first Gophercon, welcome.&#xA;&#xA;&#xA;    If you were here last year, welcome back.&#xA;&#xA;&#xA;    Thank you to the organizers&#xA;&#xA;&#xA;    for all the work it takes&#xA;&#xA;&#xA;    to make a conference like this happen.&#xA;&#xA;&#xA;    I am thrilled to be here and to be able to talk to all of you.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    I am the tech lead for the Go project&#xA;&#xA;&#xA;    and the Go team at Google.&#xA;&#xA;&#xA;    I share that role with Rob Pike.&#xA;&#xA;&#xA;    In that role, I spend a lot of time thinking about&#xA;&#xA;&#xA;    the overall Go open source project,&#xA;&#xA;&#xA;    in particular the way it runs,&#xA;&#xA;&#xA;    what it means to be open source,&#xA;&#xA;&#xA;    and the interaction between&#xA;&#xA;&#xA;    contributors inside and outside Google.&#xA;&#xA;&#xA;    Today I want to share with you&#xA;&#xA;&#xA;    how I see the Go project as a whole&#xA;&#xA;&#xA;    and then based on that explain&#xA;&#xA;&#xA;    how I see the Go open source project&#xA;&#xA;&#xA;    evolving.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_2.&#34;&gt;Why Go?&lt;/h4&gt;&#xA;  &#xA;  &#xA;  &lt;p&gt;&#xA;    To get started,&#xA;&#xA;&#xA;    we have to go back to the beginning.&#xA;&#xA;&#xA;    Why did we start working on Go?&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Go is an attempt to make programmers more productive.&#xA;&#xA;&#xA;    We wanted to improve the software development process&#xA;&#xA;&#xA;    at Google,&#xA;&#xA;&#xA;    but the problems Google has&#xA;&#xA;&#xA;    are not unique to Google.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    There were two overarching goals.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    The first goal is to make a better language&#xA;&#xA;&#xA;    to meet the challenges of scalable concurrency.&#xA;&#xA;&#xA;    By scalable concurrency I mean&#xA;&#xA;&#xA;    software that deals with many concerns simultaneously,&#xA;&#xA;&#xA;    such as coordinating a thousand back end servers&#xA;&#xA;&#xA;    by sending network traffic back and forth.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Today, that kind of software has a shorter name:&#xA;&#xA;&#xA;    we call it cloud software.&#xA;&#xA;&#xA;    It&amp;#39;s fair to say that Go was designed for the cloud&#xA;&#xA;&#xA;    before clouds ran software.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    The larger goal is to make a better environment&#xA;&#xA;&#xA;    to meet the challenges of scalable software development,&#xA;&#xA;&#xA;    software worked on and used by many people,&#xA;&#xA;&#xA;    with limited coordination between them,&#xA;&#xA;&#xA;    and maintained for years.&#xA;&#xA;&#xA;    At Google we have thousands of engineers&#xA;&#xA;&#xA;    writing and sharing their code with each other,&#xA;&#xA;&#xA;    trying to get their work done,&#xA;&#xA;&#xA;    reusing the work of others as much as possible,&#xA;&#xA;&#xA;    and working in a code base with a history&#xA;&#xA;&#xA;    dating back over ten years.&#xA;&#xA;&#xA;    Engineers often work on or at least look at&#xA;&#xA;&#xA;    code originally written by someone else,&#xA;&#xA;&#xA;    or that they wrote years ago,&#xA;&#xA;&#xA;    which often amounts to the same thing.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    That situation inside Google&#xA;&#xA;&#xA;    has a lot in common with&#xA;&#xA;&#xA;    large scale, modern open source development&#xA;&#xA;&#xA;    as practiced on sites like GitHub.&#xA;&#xA;&#xA;    Because of this,&#xA;&#xA;&#xA;    Go is a great fit for open source projects,&#xA;&#xA;&#xA;    helping them accept and manage&#xA;&#xA;&#xA;    contributions from a large community&#xA;&#xA;&#xA;    over a long period of time.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    I believe much of Go&amp;#39;s success is explained by the fact that&#xA;&#xA;&#xA;    Go is a great fit for cloud software,&#xA;&#xA;&#xA;    Go is a great fit for open source projects,&#xA;&#xA;&#xA;    and, serendipitously, both of those are&#xA;&#xA;&#xA;    growing in popularity and importance&#xA;&#xA;&#xA;    in the software industry.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Other people have made similar observations.&#xA;&#xA;&#xA;    Here are two.&#xA;&#xA;&#xA;    Last year, on RedMonk.com, Donnie Berkholz&#xA;&#xA;&#xA;    wrote about &#xA;&#xA;&#xA;    “&lt;a href=&#34;http://redmonk.com/dberkholz/2014/03/18/go-the-emerging-language-of-cloud-infrastructure/&#34; target=&#34;_blank&#34;&gt;Go as the emerging language of cloud infrastructure&lt;/a&gt;,”&#xA;&#xA;&#xA;    observing that&#xA;&#xA;&#xA;    “[Go&amp;#39;s] marquee projects ... are cloud-centric or otherwise&#xA;&#xA;&#xA;    made for dealing with distributed systems&#xA;&#xA;&#xA;    or transient environments.”&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    This year, on Texlution.com, the author&#xA;&#xA;&#xA;    wrote an article titled&#xA;&#xA;&#xA;    “&lt;a href=&#34;https://texlution.com/post/why-go-is-doomed-to-succeed/&#34; target=&#34;_blank&#34;&gt;Why Golang is doomed to succeed&lt;/a&gt;,”&#xA;&#xA;&#xA;    pointing out that this focus on large-scale development&#xA;&#xA;&#xA;    was possibly even better suited to open source than&#xA;&#xA;&#xA;    to Google itself: “This open source fitness is why I think&#xA;&#xA;&#xA;    you are about to see more and more Go around ...”&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_3.&#34;&gt;The Go Balance&lt;/h4&gt;&#xA;  &#xA;  &#xA;  &lt;p&gt;&#xA;    How does Go accomplish those things?&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    How does it make scalable concurrency&#xA;&#xA;&#xA;    and scalable software development easier?&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Most people answer this question by talking about&#xA;&#xA;&#xA;    channels and goroutines, and interfaces, and fast builds,&#xA;&#xA;&#xA;    and the go command, and good tool support.&#xA;&#xA;&#xA;    Those are all important parts of the answer,&#xA;&#xA;&#xA;    but I think there is a broader idea behind them.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    I think of that idea as Go&amp;#39;s balance.&#xA;&#xA;&#xA;    There are competing concerns in any software design,&#xA;&#xA;&#xA;    and there is a very natural tendency to try to solve &#xA;&#xA;&#xA;    all the problems you foresee.&#xA;&#xA;&#xA;    In Go, we have explicitly tried not to solve everything.&#xA;&#xA;&#xA;    Instead, we&amp;#39;ve tried to do just enough that you can build&#xA;&#xA;&#xA;    your own custom solutions easily.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    The way I would summarize Go&amp;#39;s chosen balance is this: &lt;b&gt;Do Less. Enable More.&lt;/b&gt;&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Do less, but enable more.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Go can&amp;#39;t do everything.&#xA;&#xA;&#xA;    We shouldn&amp;#39;t try.&#xA;&#xA;&#xA;    But if we work at it,&#xA;&#xA;&#xA;    Go can probably do&#xA;&#xA;&#xA;    a few things well.&#xA;&#xA;&#xA;    If we select those things carefully,&#xA;&#xA;&#xA;    we can lay a foundation &#xA;&#xA;&#xA;    on which developers can &lt;i&gt;easily&lt;/i&gt; build&#xA;&#xA;&#xA;    the solutions and tools they need,&#xA;&#xA;&#xA;    and ideally can interoperate with&#xA;&#xA;&#xA;    the solutions and tools built by others.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &lt;h4 id=&#34;TOC_3.1.&#34;&gt;Examples&lt;/h4&gt;&#xA;  &#xA;  &#xA;  &lt;p&gt;&#xA;    Let me illustrate this with some examples.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    First, the size of the Go language itself.&#xA;&#xA;&#xA;    We worked hard to put in as few concepts as possible,&#xA;&#xA;&#xA;    to avoid the problem of mutually incomprehensible dialects&#xA;&#xA;&#xA;    forming in different parts of a large developer community.&#xA;&#xA;&#xA;    No idea went into Go until&#xA;&#xA;&#xA;    it had been simplified to its essence&#xA;&#xA;&#xA;    and then had clear benefits&#xA;&#xA;&#xA;    that justified the complexity being added.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    In general, if we have 100 things&#xA;&#xA;&#xA;    we want Go to do well,&#xA;&#xA;&#xA;    we can&amp;#39;t make 100 separate changes.&#xA;&#xA;&#xA;    Instead, we try to research and understand&#xA;&#xA;&#xA;    the design space&#xA;&#xA;&#xA;    and then identify a few changes&#xA;&#xA;&#xA;    that work well together&#xA;&#xA;&#xA;    and that enable maybe 90 of those things.&#xA;&#xA;&#xA;    We&amp;#39;re willing to sacrifice the remaining 10&#xA;&#xA;&#xA;    to avoid bloating the language,&#xA;&#xA;&#xA;    to avoid adding complexity&#xA;&#xA;&#xA;    only to address specific use cases&#xA;&#xA;&#xA;    that seem important today&#xA;&#xA;&#xA;    but might be gone tomorrow.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Keeping the language small&#xA;&#xA;&#xA;    enables more important goals.&#xA;&#xA;&#xA;    Being small makes Go&#xA;&#xA;&#xA;    easier to learn,&#xA;&#xA;&#xA;    easier to understand,&#xA;&#xA;&#xA;    easier to implement,&#xA;&#xA;&#xA;    easier to reimplement,&#xA;&#xA;&#xA;    easier to debug,&#xA;&#xA;&#xA;    easier to adjust,&#xA;&#xA;&#xA;    and easier to evolve.&#xA;&#xA;&#xA;    Doing less enables more.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    I should point out that&#xA;&#xA;&#xA;    this means we say no&#xA;&#xA;&#xA;    to a lot of other people&amp;#39;s ideas,&#xA;&#xA;&#xA;    but I assure you&#xA;&#xA;&#xA;    we&amp;#39;ve said no&#xA;&#xA;&#xA;    to even more of our own ideas.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Next, channels and goroutines.&#xA;&#xA;&#xA;    How should we structure and coordinate&#xA;&#xA;&#xA;    concurrent and parallel computations?&#xA;&#xA;&#xA;    Mutexes and condition variables are very general&#xA;&#xA;&#xA;    but so low-level that they&amp;#39;re difficult to use correctly.&#xA;&#xA;&#xA;    Parallel execution frameworks like OpenMP are so high-level&#xA;&#xA;&#xA;    that they can only be used to solve a narrow range of problems.&#xA;&#xA;&#xA;    Channels and goroutines sit between these two extremes.&#xA;&#xA;&#xA;    By themselves, they aren&amp;#39;t a solution to much.&#xA;&#xA;&#xA;    But they are powerful enough to be easily arranged&#xA;&#xA;&#xA;    to enable solutions to many common problems&#xA;&#xA;&#xA;    in concurrent software.&#xA;&#xA;&#xA;    Doing less—really doing just enough—enables more.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Next, types and interfaces.&#xA;&#xA;&#xA;    Having static types enables useful compile-time checking,&#xA;&#xA;&#xA;    something lacking in dynamically-typed languages&#xA;&#xA;&#xA;    like Python or Ruby.&#xA;&#xA;&#xA;    At the same time,&#xA;&#xA;&#xA;    Go&amp;#39;s static typing avoids&#xA;&#xA;&#xA;    much of the repetition&#xA;&#xA;&#xA;    of traditional statically typed languages,&#xA;&#xA;&#xA;    making it feel more lightweight,&#xA;&#xA;&#xA;    more like the dynamically-typed languages.&#xA;&#xA;&#xA;    This was one of the first things people noticed,&#xA;&#xA;&#xA;    and many of Go&amp;#39;s early adopters came from&#xA;&#xA;&#xA;    dynamically-typed languages.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Go&amp;#39;s interfaces are a key part of that.&#xA;&#xA;&#xA;    In particular,&#xA;&#xA;&#xA;    omitting the ``implements&amp;#39;&amp;#39; declarations&#xA;&#xA;&#xA;    of Java or other languages with static hierarchy&#xA;&#xA;&#xA;    makes interfaces lighter weight and more flexible.&#xA;&#xA;&#xA;    Not having that rigid hierarchy&#xA;&#xA;&#xA;    enables idioms such as test interfaces that describe&#xA;&#xA;&#xA;    existing, unrelated production implementations.&#xA;&#xA;&#xA;    Doing less enables more.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Next, testing and benchmarking.&#xA;&#xA;&#xA;    Is there any shortage of testing&#xA;&#xA;&#xA;    and benchmarking frameworks in most languages?&#xA;&#xA;&#xA;    Is there any agreement between them?&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Go&amp;#39;s testing package is not meant&#xA;&#xA;&#xA;    to address every possible facet of these topics.&#xA;&#xA;&#xA;    Instead, it is meant to provide&#xA;&#xA;&#xA;    the basic concepts necessary&#xA;&#xA;&#xA;    for most higher-level tooling.&#xA;&#xA;&#xA;    Packages have test cases that pass, fail, or are skipped.&#xA;&#xA;&#xA;    Packages have benchmarks that run and can be measured&#xA;&#xA;&#xA;    by various metrics.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Doing less here is an attempt&#xA;&#xA;&#xA;    to reduce these concepts to their essence,&#xA;&#xA;&#xA;    to create a shared vocabulary&#xA;&#xA;&#xA;    so that richer tools can interoperate.&#xA;&#xA;&#xA;    That agreement enables higher-level testing software&#xA;&#xA;&#xA;    like Miki Tebeka&amp;#39;s go2xunit converter,&#xA;&#xA;&#xA;    or the benchcmp and benchstat&#xA;&#xA;&#xA;    benchmark analysis tools.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Because there &lt;i&gt;is&lt;/i&gt; agreement&#xA;&#xA;&#xA;    about the representation of the basic concepts,&#xA;&#xA;&#xA;    these higher-level tools work for all Go packages,&#xA;&#xA;&#xA;    not just ones that make the effort to opt in,&#xA;&#xA;&#xA;    and they interoperate with each other,&#xA;&#xA;&#xA;    in that using, say, go2xunit&#xA;&#xA;&#xA;    does not preclude also using benchstat,&#xA;&#xA;&#xA;    the way it would if these tools were, say,&#xA;&#xA;&#xA;    plugins for competing testing frameworks.&#xA;&#xA;&#xA;    Doing less enables more.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Next, refactoring and program analysis.&#xA;&#xA;&#xA;    Because Go is for large code bases,&#xA;&#xA;&#xA;    we knew it would need to support automatic&#xA;&#xA;&#xA;    maintenance and updating of source code.&#xA;&#xA;&#xA;    We also knew that this topic was too large&#xA;&#xA;&#xA;    to build in directly.&#xA;&#xA;&#xA;    But we knew one thing that we had to do.&#xA;&#xA;&#xA;    In our experience attempting&#xA;&#xA;&#xA;    automated program changes in other settings,&#xA;&#xA;&#xA;    the most significant barrier we hit &#xA;&#xA;&#xA;    was actually writing the modified program out&#xA;&#xA;&#xA;    in a format that developers can accept.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    In other languages,&#xA;&#xA;&#xA;    it&amp;#39;s common for different teams to use&#xA;&#xA;&#xA;    different formatting conventions.&#xA;&#xA;&#xA;    If an edit by a program uses the wrong convention,&#xA;&#xA;&#xA;    it either writes a section of the source file that looks nothing&#xA;&#xA;&#xA;    like the rest of the file, or it reformats the entire file,&#xA;&#xA;&#xA;    causing unnecessary and unwanted diffs.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Go does not have this problem.&#xA;&#xA;&#xA;    We designed the language to make gofmt possible,&#xA;&#xA;&#xA;    we worked hard&#xA;&#xA;&#xA;    to make gofmt&amp;#39;s formatting acceptable&#xA;&#xA;&#xA;    for all Go programs,&#xA;&#xA;&#xA;    and we made sure gofmt was there&#xA;&#xA;&#xA;    from day one of the original public release.&#xA;&#xA;&#xA;    Gofmt imposes such uniformity that&#xA;&#xA;&#xA;    automated changes blend into the rest of the file.&#xA;&#xA;&#xA;    You can&amp;#39;t tell whether a particular change&#xA;&#xA;&#xA;    was made by a person or a computer.&#xA;&#xA;&#xA;    We didn&amp;#39;t build explicit refactoring support.&#xA;&#xA;&#xA;    Establishing an agreed-upon formatting algorithm&#xA;&#xA;&#xA;    was enough of a shared base&#xA;&#xA;&#xA;    for independent tools to develop and to interoperate.&#xA;&#xA;&#xA;    Gofmt enabled gofix, goimports, eg, and other tools.&#xA;&#xA;&#xA;    I believe the work here is only just getting started.&#xA;&#xA;&#xA;    Even more can be done.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Last, building and sharing software.&#xA;&#xA;&#xA;    In the run up to Go 1, we built goinstall, &#xA;&#xA;&#xA;    which became what we all know as &amp;#34;go get&amp;#34;.&#xA;&#xA;&#xA;    That tool defined a standard zero-configuration way&#xA;&#xA;&#xA;    to resolve import paths on sites like github.com,&#xA;&#xA;&#xA;    and later a way to resolve paths on other sites&#xA;&#xA;&#xA;    by making HTTP requests.&#xA;&#xA;&#xA;    This agreed-upon resolution algorithm&#xA;&#xA;&#xA;    enabled other tools that work in terms of those paths,&#xA;&#xA;&#xA;    most notably Gary Burd&amp;#39;s creation of godoc.org.&#xA;&#xA;&#xA;    In case you haven&amp;#39;t used it,&#xA;&#xA;&#xA;    you go to godoc.org/the-import-path&#xA;&#xA;&#xA;    for any valid &amp;#34;go get&amp;#34; import path,&#xA;&#xA;&#xA;    and the web site will fetch the code&#xA;&#xA;&#xA;    and show you the documentation for it.&#xA;&#xA;&#xA;    A nice side effect of this has been that&#xA;&#xA;&#xA;    godoc.org serves as a rough master list&#xA;&#xA;&#xA;    of the Go packages publicly available.&#xA;&#xA;&#xA;    All we did was give import paths a clear meaning.&#xA;&#xA;&#xA;    Do less, enable more.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    You&amp;#39;ll notice that many of these tooling examples&#xA;&#xA;&#xA;    are about establishing a shared convention.&#xA;&#xA;&#xA;    Sometimes people refer to this as Go being “opinionated,”&#xA;&#xA;&#xA;    but there&amp;#39;s something deeper going on.&#xA;&#xA;&#xA;    Agreeing to the limitations&#xA;&#xA;&#xA;    of a shared convention&#xA;&#xA;&#xA;    is a way to enable&#xA;&#xA;&#xA;    a broad class of tools that interoperate,&#xA;&#xA;&#xA;    because they all speak the same base language.&#xA;&#xA;&#xA;    This is a very effective way&#xA;&#xA;&#xA;    to do less but enable more.&#xA;&#xA;&#xA;    Specifically, in many cases&#xA;&#xA;&#xA;    we can do the minimum required&#xA;&#xA;&#xA;    to establish a shared understanding&#xA;&#xA;&#xA;    of a particular concept, like remote imports,&#xA;&#xA;&#xA;    or the proper formatting of a source file,&#xA;&#xA;&#xA;    and thereby enable&#xA;&#xA;&#xA;    the creation of packages and tools&#xA;&#xA;&#xA;    that work together&#xA;&#xA;&#xA;    because they all agree&#xA;&#xA;&#xA;    about those core details.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    I&amp;#39;m going to return to that idea later.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_4.&#34;&gt;Why is Go open source?&lt;/h4&gt;&#xA;  &#xA;  &#xA;  &lt;p&gt;&#xA;    But first, as I said earlier,&#xA;&#xA;&#xA;    I want to explain how I see&#xA;&#xA;&#xA;    the balance of Do Less and Enable More&#xA;&#xA;&#xA;    guiding our work&#xA;&#xA;&#xA;    on the broader&#xA;&#xA;&#xA;    Go open source project.&#xA;&#xA;&#xA;    To do that, I need to start with&#xA;&#xA;&#xA;    why Go is open source at all.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Google pays me and others to work on Go, because,&#xA;&#xA;&#xA;    if Google&amp;#39;s programmers are more productive,&#xA;&#xA;&#xA;    Google can build products faster,&#xA;&#xA;&#xA;    maintain them more easily,&#xA;&#xA;&#xA;    and so on.&#xA;&#xA;&#xA;    But why open source Go?&#xA;&#xA;&#xA;    Why should Google share this benefit with the world?&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Of course, many of us&#xA;&#xA;&#xA;    worked on open source projects before Go,&#xA;&#xA;&#xA;    and we naturally wanted Go&#xA;&#xA;&#xA;    to be part of that open source world.&#xA;&#xA;&#xA;    But our preferences are not a business justification.&#xA;&#xA;&#xA;    The business justification is that &#xA;&#xA;&#xA;    Go is open source&#xA;&#xA;&#xA;    because that&amp;#39;s the only way&#xA;&#xA;&#xA;    that Go can succeed.&#xA;&#xA;&#xA;    We, the team that built Go within Google,&#xA;&#xA;&#xA;    knew this from day one.&#xA;&#xA;&#xA;    We knew that Go had to be made available&#xA;&#xA;&#xA;    to as many people as possible&#xA;&#xA;&#xA;    for it to succeed.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Closed languages die.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    A language needs large, broad communities.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    A language needs lots of people writing lots of software,&#xA;&#xA;&#xA;    so that when you need a particular tool or library,&#xA;&#xA;&#xA;    there&amp;#39;s a good chance it has already been written,&#xA;&#xA;&#xA;    by someone who knows the topic better than you,&#xA;&#xA;&#xA;    and who spent more time than you have to make it great.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    A language needs lots of people reporting bugs,&#xA;&#xA;&#xA;    so that problems are identified and fixed quickly.&#xA;&#xA;&#xA;    Because of the much larger user base,&#xA;&#xA;&#xA;    the Go compilers are much more robust and spec-compliant&#xA;&#xA;&#xA;    than the Plan 9 C compilers they&amp;#39;re loosely based on ever were.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    A language needs lots of people using it&#xA;&#xA;&#xA;    for lots of different purposes,&#xA;&#xA;&#xA;    so that the language doesn&amp;#39;t overfit to one use case&#xA;&#xA;&#xA;    and end up useless when the technology landscape changes.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    A language needs lots of people who want to learn it,&#xA;&#xA;&#xA;    so that there is a market for people to write books&#xA;&#xA;&#xA;    or teach courses,&#xA;&#xA;&#xA;    or run conferences like this one.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    None of this could have happened&#xA;&#xA;&#xA;    if Go had stayed within Google.&#xA;&#xA;&#xA;    Go would have suffocated inside Google,&#xA;&#xA;&#xA;    or inside any single company&#xA;&#xA;&#xA;    or closed environment.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Fundamentally,&#xA;&#xA;&#xA;    Go must be open,&#xA;&#xA;&#xA;    and Go needs you.&#xA;&#xA;&#xA;    Go can&amp;#39;t succeed without all of you,&#xA;&#xA;&#xA;    without all the people using Go&#xA;&#xA;&#xA;    for all different kinds of projects&#xA;&#xA;&#xA;    all over the world.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    In turn, the Go team at Google&#xA;&#xA;&#xA;    could never be large enough&#xA;&#xA;&#xA;    to support the entire Go community.&#xA;&#xA;&#xA;    To keep scaling,&#xA;&#xA;&#xA;    we&#xA;&#xA;&#xA;    need to enable all this ``more&amp;#39;&amp;#39;&#xA;&#xA;&#xA;    while doing less.&#xA;&#xA;&#xA;    Open source is a huge part of that.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_5.&#34;&gt;Go&amp;#39;s open source&lt;/h4&gt;&#xA;  &#xA;  &#xA;  &lt;p&gt;&#xA;    What does open source mean?&#xA;&#xA;&#xA;    The minimum requirement is to open the source code,&#xA;&#xA;&#xA;    making it available under an open source license,&#xA;&#xA;&#xA;    and we&amp;#39;ve done that.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    But we also opened our development process:&#xA;&#xA;&#xA;    since announcing Go,&#xA;&#xA;&#xA;    we&amp;#39;ve done all our development in public,&#xA;&#xA;&#xA;    on public mailing lists open to all.&#xA;&#xA;&#xA;    We accept and review &#xA;&#xA;&#xA;    source code contributions from anyone.&#xA;&#xA;&#xA;    The process is the same&#xA;&#xA;&#xA;    whether you work for Google or not.&#xA;&#xA;&#xA;    We maintain our bug tracker in public,&#xA;&#xA;&#xA;    we discuss and develop proposals for changes in public,&#xA;&#xA;&#xA;    and we work toward releases in public.&#xA;&#xA;&#xA;    The public source tree is the authoritative copy.&#xA;&#xA;&#xA;    Changes happen there first.&#xA;&#xA;&#xA;    They are only brought into&#xA;&#xA;&#xA;    Google&amp;#39;s internal source tree later.&#xA;&#xA;&#xA;    For Go, being open source means&#xA;&#xA;&#xA;    that this is a collective effort&#xA;&#xA;&#xA;    that extends beyond Google, open to all.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Any open source project starts with a few people,&#xA;&#xA;&#xA;    often just one, but with Go it was three:&#xA;&#xA;&#xA;    Robert Griesemer, Rob Pike, and Ken Thompson.&#xA;&#xA;&#xA;    They had a vision of&#xA;&#xA;&#xA;    what they wanted Go to be,&#xA;&#xA;&#xA;    what they thought Go could do better&#xA;&#xA;&#xA;    than existing languages, and&#xA;&#xA;&#xA;    Robert will talk more about that tomorrow morning.&#xA;&#xA;&#xA;    I was the next person to join the team,&#xA;&#xA;&#xA;    and then Ian Taylor,&#xA;&#xA;&#xA;    and then, one by one,&#xA;&#xA;&#xA;    we&amp;#39;ve ended up where we are today,&#xA;&#xA;&#xA;    with hundreds of contributors.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Thank You&#xA;&#xA;&#xA;    to the many people who have contributed&#xA;&#xA;&#xA;    code&#xA;&#xA;&#xA;    or ideas&#xA;&#xA;&#xA;    or bug reports&#xA;&#xA;&#xA;    to the Go project so far.&#xA;&#xA;&#xA;    We tried to list everyone we could&#xA;&#xA;&#xA;    in our space in the program today.&#xA;&#xA;&#xA;    If your name is not there,&#xA;&#xA;&#xA;    I apologize,&#xA;&#xA;&#xA;    but thank you.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    I believe&#xA;&#xA;&#xA;    the hundreds of contributors so far&#xA;&#xA;&#xA;    are working toward a shared vision&#xA;&#xA;&#xA;    of what Go can be.&#xA;&#xA;&#xA;    It&amp;#39;s hard to put words to these things,&#xA;&#xA;&#xA;    but I did my best&#xA;&#xA;&#xA;    to explain one part of the vision&#xA;&#xA;&#xA;    earlier:&#xA;&#xA;&#xA;    Do Less, Enable More.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_6.&#34;&gt;Google&amp;#39;s role&lt;/h4&gt;&#xA;  &#xA;  &#xA;  &lt;p&gt;&#xA;    A natural question is:&#xA;&#xA;&#xA;    What is the role&#xA;&#xA;&#xA;    of the Go team at Google,&#xA;&#xA;&#xA;    compared to other contributors?&#xA;&#xA;&#xA;    I believe that role&#xA;&#xA;&#xA;    has changed over time,&#xA;&#xA;&#xA;    and it continues to change.&#xA;&#xA;&#xA;    The general trend is that&#xA;&#xA;&#xA;    over time&#xA;&#xA;&#xA;    the Go team at Google&#xA;&#xA;&#xA;    should be doing less&#xA;&#xA;&#xA;    and enabling more.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    In the very early days,&#xA;&#xA;&#xA;    before Go was known to the public,&#xA;&#xA;&#xA;    the Go team at Google&#xA;&#xA;&#xA;    was obviously working by itself.&#xA;&#xA;&#xA;    We wrote the first draft of everything: &#xA;&#xA;&#xA;    the specification,&#xA;&#xA;&#xA;    the compiler,&#xA;&#xA;&#xA;    the runtime,&#xA;&#xA;&#xA;    the standard library.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Once Go was open sourced, though,&#xA;&#xA;&#xA;    our role began to change.&#xA;&#xA;&#xA;    The most important thing&#xA;&#xA;&#xA;    we needed to do&#xA;&#xA;&#xA;    was communicate our vision for Go.&#xA;&#xA;&#xA;    That&amp;#39;s difficult,&#xA;&#xA;&#xA;    and we&amp;#39;re still working at it..&#xA;&#xA;&#xA;    The initial implementation&#xA;&#xA;&#xA;    was an important way&#xA;&#xA;&#xA;    to communicate that vision,&#xA;&#xA;&#xA;    as was the development work we led&#xA;&#xA;&#xA;    that resulted in Go 1,&#xA;&#xA;&#xA;    and the various blog posts,&#xA;&#xA;&#xA;    and articles,&#xA;&#xA;&#xA;    and talks we&amp;#39;ve published.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    But as Rob said at Gophercon last year,&#xA;&#xA;&#xA;    &amp;#34;the language is done.&amp;#34;&#xA;&#xA;&#xA;    Now we need to see how it works,&#xA;&#xA;&#xA;    to see how people use it,&#xA;&#xA;&#xA;    to see what people build.&#xA;&#xA;&#xA;    The focus now is on&#xA;&#xA;&#xA;    expanding the kind of work&#xA;&#xA;&#xA;    that Go can help with.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Google&amp;#39;s primarily role is now&#xA;&#xA;&#xA;    to enable the community,&#xA;&#xA;&#xA;    to coordinate,&#xA;&#xA;&#xA;    to make sure changes work well together,&#xA;&#xA;&#xA;    and to keep Go true to the original vision.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Google&amp;#39;s primary role is:&#xA;&#xA;&#xA;    Do Less. Enable More.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    I mentioned earlier&#xA;&#xA;&#xA;    that we&amp;#39;d rather have a small number of features&#xA;&#xA;&#xA;    that enable, say, 90% of the target use cases,&#xA;&#xA;&#xA;    and avoid the orders of magnitude&#xA;&#xA;&#xA;    more features necessary&#xA;&#xA;&#xA;    to reach 99 or 100%.&#xA;&#xA;&#xA;    We&amp;#39;ve been successful in applying that strategy&#xA;&#xA;&#xA;    to the areas of software that we know well.&#xA;&#xA;&#xA;    But if Go is to become useful in many new domains,&#xA;&#xA;&#xA;    we need experts in those areas&#xA;&#xA;&#xA;    to bring their expertise&#xA;&#xA;&#xA;    to our discussions,&#xA;&#xA;&#xA;    so that together&#xA;&#xA;&#xA;    we can design small adjustments&#xA;&#xA;&#xA;    that enable many new applications for Go.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    This shift applies not just to design&#xA;&#xA;&#xA;    but also to development.&#xA;&#xA;&#xA;    The role of the Go team at Google&#xA;&#xA;&#xA;    continues to shift&#xA;&#xA;&#xA;    more to one of guidance&#xA;&#xA;&#xA;    and less of pure development.&#xA;&#xA;&#xA;    I certainly spend much more time&#xA;&#xA;&#xA;    doing code reviews than writing code,&#xA;&#xA;&#xA;    more time processing bug reports&#xA;&#xA;&#xA;    than filing bug reports myself.&#xA;&#xA;&#xA;    We need to do less and enable more.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    As design and development shift&#xA;&#xA;&#xA;    to the broader Go community,&#xA;&#xA;&#xA;    one of the most important things&#xA;&#xA;&#xA;    we&#xA;&#xA;&#xA;    the original authors of Go&#xA;&#xA;&#xA;    can offer&#xA;&#xA;&#xA;    is consistency of vision,&#xA;&#xA;&#xA;    to help keep Go&#xA;&#xA;&#xA;    Go.&#xA;&#xA;&#xA;    The balance that we must strike&#xA;&#xA;&#xA;    is certainly subjective.&#xA;&#xA;&#xA;    For example, a mechanism for extensible syntax&#xA;&#xA;&#xA;    would be a way to&#xA;&#xA;&#xA;    enable more&#xA;&#xA;&#xA;    ways to write Go code,&#xA;&#xA;&#xA;    but that would run counter to our goal&#xA;&#xA;&#xA;    of having a consistent language&#xA;&#xA;&#xA;    without different dialects.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    We have to say no sometimes,&#xA;&#xA;&#xA;    perhaps more than in other language communities,&#xA;&#xA;&#xA;    but when we do,&#xA;&#xA;&#xA;    we aim to do so&#xA;&#xA;&#xA;    constructively and respectfully,&#xA;&#xA;&#xA;    to take that as an opportunity&#xA;&#xA;&#xA;    to clarify the vision for Go.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Of course, it&amp;#39;s not all coordination and vision.&#xA;&#xA;&#xA;    Google still funds Go development work.&#xA;&#xA;&#xA;    Rick Hudson is going to talk later today&#xA;&#xA;&#xA;    about his work on reducing garbage collector latency,&#xA;&#xA;&#xA;    and Hana Kim is going to talk tomorrow&#xA;&#xA;&#xA;    about her work on bringing Go to mobile devices.&#xA;&#xA;&#xA;    But I want to make clear that,&#xA;&#xA;&#xA;    as much as possible,&#xA;&#xA;&#xA;    we aim to treat&#xA;&#xA;&#xA;    development funded by Google&#xA;&#xA;&#xA;    as equal to&#xA;&#xA;&#xA;    development funded by other companies&#xA;&#xA;&#xA;    or contributed by individuals using their spare time.&#xA;&#xA;&#xA;    We do this because we don&amp;#39;t know&#xA;&#xA;&#xA;    where the next great idea will come from.&#xA;&#xA;&#xA;    Everyone contributing to Go&#xA;&#xA;&#xA;    should have the opportunity to be heard.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &lt;h4 id=&#34;TOC_6.1.&#34;&gt;Examples&lt;/h4&gt;&#xA;  &#xA;  &#xA;  &lt;p&gt;&#xA;    I want to share some evidence for this claim&#xA;&#xA;&#xA;    that, over time,&#xA;&#xA;&#xA;    the original Go team at Google&#xA;&#xA;&#xA;    is focusing more on &#xA;&#xA;&#xA;    coordination than direct development.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    First, the sources of funding&#xA;&#xA;&#xA;    for Go development are expanding.&#xA;&#xA;&#xA;    Before the open source release,&#xA;&#xA;&#xA;    obviously Google paid for all Go development.&#xA;&#xA;&#xA;    After the open source release,&#xA;&#xA;&#xA;    many individuals started contributing their time,&#xA;&#xA;&#xA;    and we&amp;#39;ve slowly but steadily&#xA;&#xA;&#xA;    been growing the number of contributors&#xA;&#xA;&#xA;    supported by other companies&#xA;&#xA;&#xA;    to work on Go at least part-time,&#xA;&#xA;&#xA;    especially as it relates to&#xA;&#xA;&#xA;    making Go more useful for those companies.&#xA;&#xA;&#xA;    Today, that list includes&#xA;&#xA;&#xA;    Canonical, Dropbox, Intel, Oracle, and others.&#xA;&#xA;&#xA;    And of course Gophercon and the other&#xA;&#xA;&#xA;    regional Go conferences are organized&#xA;&#xA;&#xA;    entirely by people outside Google,&#xA;&#xA;&#xA;    and they have many corporate sponsors&#xA;&#xA;&#xA;    besides Google.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Second, the conceptual depth&#xA;&#xA;&#xA;    of Go development&#xA;&#xA;&#xA;    done outside the original team&#xA;&#xA;&#xA;    is expanding.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Immediately after the open source release,&#xA;&#xA;&#xA;    one of the first large contributions&#xA;&#xA;&#xA;    was the port to Microsoft Windows,&#xA;&#xA;&#xA;    started by Hector Chu&#xA;&#xA;&#xA;    and completed by Alex Brainman and others.&#xA;&#xA;&#xA;    More contributors ported Go&#xA;&#xA;&#xA;    to other operating systems.&#xA;&#xA;&#xA;    Even more contributors&#xA;&#xA;&#xA;    rewrote most of our numeric code&#xA;&#xA;&#xA;    to be faster or more precise or both.&#xA;&#xA;&#xA;    These were all important contributions,&#xA;&#xA;&#xA;    and very much appreciated,&#xA;&#xA;&#xA;    but&#xA;&#xA;&#xA;    for the most part&#xA;&#xA;&#xA;    they did not involve new designs.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    More recently,&#xA;&#xA;&#xA;    a group of contributors led by Aram Hăvărneanu&#xA;&#xA;&#xA;    ported Go to the ARM 64 architecture,&#xA;&#xA;&#xA;    This was the first architecture port&#xA;&#xA;&#xA;    by contributors outside Google.&#xA;&#xA;&#xA;    This is significant, because&#xA;&#xA;&#xA;    in general&#xA;&#xA;&#xA;    support for a new architecture&#xA;&#xA;&#xA;    requires more design work&#xA;&#xA;&#xA;    than support for a new operating system.&#xA;&#xA;&#xA;    There is more variation between architectures&#xA;&#xA;&#xA;    than between operating systems.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Another example is the introduction&#xA;&#xA;&#xA;    over the past few releases&#xA;&#xA;&#xA;    of preliminary support&#xA;&#xA;&#xA;    for building Go programs using shared libraries.&#xA;&#xA;&#xA;    This feature is important for many Linux distributions&#xA;&#xA;&#xA;    but not as important for Google,&#xA;&#xA;&#xA;    because we deploy static binaries.&#xA;&#xA;&#xA;    We have been helping guide the overall strategy,&#xA;&#xA;&#xA;    but most of the design&#xA;&#xA;&#xA;    and nearly all of the implementation&#xA;&#xA;&#xA;    has been done by contributors outside Google,&#xA;&#xA;&#xA;    especially Michael Hudson-Doyle.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    My last example is the go command&amp;#39;s&#xA;&#xA;&#xA;    approach to vendoring.&#xA;&#xA;&#xA;    I define vendoring as&#xA;&#xA;&#xA;    copying source code for external dependencies&#xA;&#xA;&#xA;    into your tree&#xA;&#xA;&#xA;    to make sure that they doesn&amp;#39;t disappear&#xA;&#xA;&#xA;    or change underfoot.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Vendoring is not a problem Google suffers,&#xA;&#xA;&#xA;    at least not the way the rest of the world does.&#xA;&#xA;&#xA;    We copy open source libraries we want to use&#xA;&#xA;&#xA;    into our shared source tree,&#xA;&#xA;&#xA;    record what version we copied,&#xA;&#xA;&#xA;    and only update the copy&#xA;&#xA;&#xA;    when there is a need to do so.&#xA;&#xA;&#xA;    We have a rule&#xA;&#xA;&#xA;    that there can only be one version&#xA;&#xA;&#xA;    of a particular library in the source tree,&#xA;&#xA;&#xA;    and it&amp;#39;s the job of whoever wants to upgrade that library&#xA;&#xA;&#xA;    to make sure it keeps working as expected&#xA;&#xA;&#xA;    by the Google code that depends on it.&#xA;&#xA;&#xA;    None of this happens often.&#xA;&#xA;&#xA;    This is the lazy approach to vendoring.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    In contrast, most projects outside Google&#xA;&#xA;&#xA;    take a more eager approach,&#xA;&#xA;&#xA;    importing and updating code&#xA;&#xA;&#xA;    using automated tools&#xA;&#xA;&#xA;    and making sure that they are&#xA;&#xA;&#xA;    always using the latest versions.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Because Google has relatively little experience&#xA;&#xA;&#xA;    with this vendoring problem,&#xA;&#xA;&#xA;    we left it to users outside Google to develop solutions.&#xA;&#xA;&#xA;    Over the past five years,&#xA;&#xA;&#xA;    people have built a series of tools.&#xA;&#xA;&#xA;    The main ones in use today are &#xA;&#xA;&#xA;    Keith Rarick&amp;#39;s godep,&#xA;&#xA;&#xA;    Owen Ou&amp;#39;s nut,&#xA;&#xA;&#xA;    and the gb-vendor plugin for Dave Cheney&amp;#39;s gb,&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    There are two problems with the current situation.&#xA;&#xA;&#xA;    The first is that these tools&#xA;&#xA;&#xA;    are not compatible&#xA;&#xA;&#xA;    out of the box&#xA;&#xA;&#xA;    with the go command&amp;#39;s &amp;#34;go get&amp;#34;.&#xA;&#xA;&#xA;    The second is that the tools&#xA;&#xA;&#xA;    are not even compatible with each other.&#xA;&#xA;&#xA;    Both of these problems&#xA;&#xA;&#xA;    fragment the developer community by tool.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Last fall, we started a public design discussion&#xA;&#xA;&#xA;    to try to build consensus on&#xA;&#xA;&#xA;    some basics about&#xA;&#xA;&#xA;    how these tools all operate,&#xA;&#xA;&#xA;    so that they can work alongside &amp;#34;go get&amp;#34;&#xA;&#xA;&#xA;    and each other.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Our basic proposal was that all tools agree&#xA;&#xA;&#xA;    on the approach of rewriting import paths during vendoring,&#xA;&#xA;&#xA;    to fit with &amp;#34;go get&amp;#34;&amp;#39;s model,&#xA;&#xA;&#xA;    and also that all tools agree on a file format&#xA;&#xA;&#xA;    describing the source and version of the copied code,&#xA;&#xA;&#xA;    so that the different vendoring tools&#xA;&#xA;&#xA;    can be used together&#xA;&#xA;&#xA;    even by a single project.&#xA;&#xA;&#xA;    If you use one today,&#xA;&#xA;&#xA;    you should still be able to use another tomorrow.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Finding common ground in this way&#xA;&#xA;&#xA;    was very much in the spirit of Do Less, Enable More.&#xA;&#xA;&#xA;    If we could build consensus&#xA;&#xA;&#xA;    about these basic semantic aspects,&#xA;&#xA;&#xA;    that would enable &amp;#34;go get&amp;#34; and all these tools to interoperate,&#xA;&#xA;&#xA;    and it would enable switching between tools,&#xA;&#xA;&#xA;    the same way that&#xA;&#xA;&#xA;    agreement about how Go programs&#xA;&#xA;&#xA;    are stored in text files&#xA;&#xA;&#xA;    enables the Go compiler and all text editors to interoperate.&#xA;&#xA;&#xA;    So we sent out our proposal for common ground.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Two things happened.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    First, Daniel Theophanes&#xA;&#xA;&#xA;    started a vendor-spec project on GitHub&#xA;&#xA;&#xA;    with a new proposal&#xA;&#xA;&#xA;    and took over coordination and design&#xA;&#xA;&#xA;    of the spec for vendoring metadata.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Second, the community spoke&#xA;&#xA;&#xA;    with essentially one voice&#xA;&#xA;&#xA;    to say that&#xA;&#xA;&#xA;    rewriting import paths during vendoring&#xA;&#xA;&#xA;    was not tenable.&#xA;&#xA;&#xA;    Vendoring works much more smoothly&#xA;&#xA;&#xA;    if code can be copied without changes.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Keith Rarick posted an alternate proposal&#xA;&#xA;&#xA;    for a minimal change to the go command&#xA;&#xA;&#xA;    to support vendoring without rewriting import paths.&#xA;&#xA;&#xA;    Keith&amp;#39;s proposal was configuration-free&#xA;&#xA;&#xA;    and fit in well with the rest of the go command&amp;#39;s approach.&#xA;&#xA;&#xA;    That proposal will ship&#xA;&#xA;&#xA;    as an experimental feature in Go 1.5&#xA;&#xA;&#xA;    and likely enabled by default in Go 1.6.&#xA;&#xA;&#xA;    And I believe that the various vendoring tool authors&#xA;&#xA;&#xA;    have agreed to adopt Daniel&amp;#39;s spec once it is finalized.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    The result&#xA;&#xA;&#xA;    is that at the next Gophercon&#xA;&#xA;&#xA;    we should have broad interoperability&#xA;&#xA;&#xA;    between vendoring tools and the go command,&#xA;&#xA;&#xA;    and the design to make that happen&#xA;&#xA;&#xA;    was done entirely by contributors &#xA;&#xA;&#xA;    outside the original Go team.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Not only that,&#xA;&#xA;&#xA;    the Go team&amp;#39;s proposal for how to do this&#xA;&#xA;&#xA;    was essentially completely wrong.&#xA;&#xA;&#xA;    The Go community told us that&#xA;&#xA;&#xA;    very clearly.&#xA;&#xA;&#xA;    We took that advice,&#xA;&#xA;&#xA;    and now there&amp;#39;s a plan for vendoring support&#xA;&#xA;&#xA;    that I believe&#xA;&#xA;&#xA;    everyone involved is happy with.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    This is also a good example&#xA;&#xA;&#xA;    of our general approach to design.&#xA;&#xA;&#xA;    We try not to make any changes to Go&#xA;&#xA;&#xA;    until we feel there is broad consensus&#xA;&#xA;&#xA;    on a well-understood solution.&#xA;&#xA;&#xA;    For vendoring,&#xA;&#xA;&#xA;    feedback and design&#xA;&#xA;&#xA;    from the Go community&#xA;&#xA;&#xA;    was critical to reaching that point.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    This general trend&#xA;&#xA;&#xA;    toward both code and design&#xA;&#xA;&#xA;    coming from the broader Go community&#xA;&#xA;&#xA;    is important for Go.&#xA;&#xA;&#xA;    You, the broader Go community,&#xA;&#xA;&#xA;    know what is working&#xA;&#xA;&#xA;    and what is not &#xA;&#xA;&#xA;    in the environments where you use Go.&#xA;&#xA;&#xA;    We at Google don&amp;#39;t.&#xA;&#xA;&#xA;    More and more,&#xA;&#xA;&#xA;    we will rely on your expertise,&#xA;&#xA;&#xA;    and we will try to help you develop&#xA;&#xA;&#xA;    designs and code&#xA;&#xA;&#xA;    that extend Go to be useful in more settings&#xA;&#xA;&#xA;    and fit well with Go&amp;#39;s original vision.&#xA;&#xA;&#xA;    At the same time,&#xA;&#xA;&#xA;    we will continue to wait&#xA;&#xA;&#xA;    for broad consensus&#xA;&#xA;&#xA;    on well-understood solutions.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    This brings me to my last point.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_7.&#34;&gt;Code of Conduct&lt;/h4&gt;&#xA;  &#xA;  &#xA;  &lt;p&gt;&#xA;    I&amp;#39;ve argued that Go must be open,&#xA;&#xA;&#xA;    and that Go needs your help.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    But in fact Go needs everyone&amp;#39;s help.&#xA;&#xA;&#xA;    And everyone isn&amp;#39;t here.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Go needs ideas from as many people as possible.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    To make that a reality,&#xA;&#xA;&#xA;    the Go community needs to be&#xA;&#xA;&#xA;    as inclusive,&#xA;&#xA;&#xA;    welcoming,&#xA;&#xA;&#xA;    helpful,&#xA;&#xA;&#xA;    and respectful as possible.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    The Go community is large enough now that,&#xA;&#xA;&#xA;    instead of assuming that everyone involved&#xA;&#xA;&#xA;    knows what is expected,&#xA;&#xA;&#xA;    I and others believe that it makes sense&#xA;&#xA;&#xA;    to write down those expectations explicitly.&#xA;&#xA;&#xA;    Much like the Go spec&#xA;&#xA;&#xA;    sets expectations for all Go compilers,&#xA;&#xA;&#xA;    we can write a spec&#xA;&#xA;&#xA;    setting expectations for our behavior&#xA;&#xA;&#xA;    in online discussions&#xA;&#xA;&#xA;    and in offline meetings like this one.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Like any good spec,&#xA;&#xA;&#xA;    it must be general enough&#xA;&#xA;&#xA;    to allow many implementations&#xA;&#xA;&#xA;    but specific enough&#xA;&#xA;&#xA;    that it can identify important problems.&#xA;&#xA;&#xA;    When our behavior doesn&amp;#39;t meet the spec,&#xA;&#xA;&#xA;    people can point that out to us,&#xA;&#xA;&#xA;    and we can fix the problem.&#xA;&#xA;&#xA;    At the same time,&#xA;&#xA;&#xA;    it&amp;#39;s important to understand that&#xA;&#xA;&#xA;    this kind of spec&#xA;&#xA;&#xA;    cannot be as precise as a language spec.&#xA;&#xA;&#xA;    We must start with the assumption&#xA;&#xA;&#xA;    that we will all be reasonable in applying it. &#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    This kind of spec&#xA;&#xA;&#xA;    is often referred to as&#xA;&#xA;&#xA;    a Code of Conduct.&#xA;&#xA;&#xA;    Gophercon has one,&#xA;&#xA;&#xA;    which we&amp;#39;ve all agreed to follow&#xA;&#xA;&#xA;    by being here,&#xA;&#xA;&#xA;    but the Go community does not.&#xA;&#xA;&#xA;    I and others&#xA;&#xA;&#xA;    believe the Go community&#xA;&#xA;&#xA;    needs a Code of Conduct.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    But what should it say?&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    I believe&#xA;&#xA;&#xA;    the most important&#xA;&#xA;&#xA;    overall statement we can make&#xA;&#xA;&#xA;    is that&#xA;&#xA;&#xA;    if you want to use or discuss Go,&#xA;&#xA;&#xA;    then you are welcome here,&#xA;&#xA;&#xA;    in our community.&#xA;&#xA;&#xA;    That is the standard&#xA;&#xA;&#xA;    I believe we aspire to.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    If for no other reason&#xA;&#xA;&#xA;    (and, to be clear, there are excellent other reasons),&#xA;&#xA;&#xA;    Go needs as large a community as possible.&#xA;&#xA;&#xA;    To the extent that behavior&#xA;&#xA;&#xA;    limits the size of the community,&#xA;&#xA;&#xA;    it holds Go back.&#xA;&#xA;&#xA;    And behavior can easily&#xA;&#xA;&#xA;    limit the size of the community.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    The tech community in general&#xA;&#xA;&#xA;    and the Go community in particular&#xA;&#xA;&#xA;    is skewed toward people who communicate bluntly.&#xA;&#xA;&#xA;    I don&amp;#39;t believe this is fundamental.&#xA;&#xA;&#xA;    I don&amp;#39;t believe this is necessary.&#xA;&#xA;&#xA;    But it&amp;#39;s especially easy to do&#xA;&#xA;&#xA;    in online discussions like email and IRC,&#xA;&#xA;&#xA;    where plain text is not supplemented&#xA;&#xA;&#xA;    by the other cues and signals we have&#xA;&#xA;&#xA;    in face-to-face interactions.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    For example, I have learned&#xA;&#xA;&#xA;    that when I am pressed for time&#xA;&#xA;&#xA;    I tend to write fewer words,&#xA;&#xA;&#xA;    with the end result that&#xA;&#xA;&#xA;    my emails seem not just hurried&#xA;&#xA;&#xA;    but blunt, impatient, even dismissive.&#xA;&#xA;&#xA;    That&amp;#39;s not how I feel,&#xA;&#xA;&#xA;    but it&amp;#39;s how I can come across,&#xA;&#xA;&#xA;    and that impression can be enough&#xA;&#xA;&#xA;    to make people think twice&#xA;&#xA;&#xA;    about using or contributing&#xA;&#xA;&#xA;    to Go.&#xA;&#xA;&#xA;    I realized I was doing this&#xA;&#xA;&#xA;    when some Go contributors&#xA;&#xA;&#xA;    sent me private email to let me know.&#xA;&#xA;&#xA;    Now, when I am pressed for time,&#xA;&#xA;&#xA;    I pay extra attention to what I&amp;#39;m writing,&#xA;&#xA;&#xA;    and I often write more than I naturally would,&#xA;&#xA;&#xA;    to make sure&#xA;&#xA;&#xA;    I&amp;#39;m sending the message I intend.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    I believe&#xA;&#xA;&#xA;    that correcting the parts&#xA;&#xA;&#xA;    of our everyday interactions,&#xA;&#xA;&#xA;    intended or not,&#xA;&#xA;&#xA;    that drive away potential users and contributors&#xA;&#xA;&#xA;    is one of the most important things&#xA;&#xA;&#xA;    we can all do&#xA;&#xA;&#xA;    to make sure the Go community&#xA;&#xA;&#xA;    continues to grow.&#xA;&#xA;&#xA;    A good Code of Conduct can help us do that.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    We have no experience writing a Code of Conduct,&#xA;&#xA;&#xA;    so we have been reading existing ones,&#xA;&#xA;&#xA;    and we will probably adopt an existing one,&#xA;&#xA;&#xA;    perhaps with minor adjustments.&#xA;&#xA;&#xA;    The one I like the most is the Django Code of Conduct,&#xA;&#xA;&#xA;    which originated with another project called SpeakUp!&#xA;&#xA;&#xA;    It is structured as an elaboration of a list of&#xA;&#xA;&#xA;    reminders for everyday interaction.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    &amp;#34;Be friendly and patient.&#xA;&#xA;&#xA;    Be welcoming.&#xA;&#xA;&#xA;    Be considerate.&#xA;&#xA;&#xA;    Be respectful.&#xA;&#xA;&#xA;    Be careful in the words that you choose.&#xA;&#xA;&#xA;    When we disagree, try to understand why.&amp;#34;&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    I believe this captures the tone we want to set,&#xA;&#xA;&#xA;    the message we want to send,&#xA;&#xA;&#xA;    the environment we want to create&#xA;&#xA;&#xA;    for new contributors.&#xA;&#xA;&#xA;    I certainly want to be&#xA;&#xA;&#xA;    friendly,&#xA;&#xA;&#xA;    patient,&#xA;&#xA;&#xA;    welcoming,&#xA;&#xA;&#xA;    considerate,&#xA;&#xA;&#xA;    and respectful.&#xA;&#xA;&#xA;    I won&amp;#39;t get it exactly right all the time,&#xA;&#xA;&#xA;    and I would welcome a helpful note&#xA;&#xA;&#xA;    if I&amp;#39;m not living up to that.&#xA;&#xA;&#xA;    I believe most of us&#xA;&#xA;&#xA;    feel the same way.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    I haven&amp;#39;t mentioned&#xA;&#xA;&#xA;    active exclusion based on&#xA;&#xA;&#xA;    or disproportionately affecting&#xA;&#xA;&#xA;    race, gender, disability,&#xA;&#xA;&#xA;    or other personal characteristics,&#xA;&#xA;&#xA;    and I haven&amp;#39;t mentioned harassment.&#xA;&#xA;&#xA;    For me,&#xA;&#xA;&#xA;    it follows from what I just said&#xA;&#xA;&#xA;    that exclusionary behavior&#xA;&#xA;&#xA;    or explicit harassment&#xA;&#xA;&#xA;    is absolutely unacceptable,&#xA;&#xA;&#xA;    online and offline.&#xA;&#xA;&#xA;    Every Code of Conduct says this explicitly,&#xA;&#xA;&#xA;    and I expect that ours will too.&#xA;&#xA;&#xA;    But I believe the SpeakUp! reminders&#xA;&#xA;&#xA;    about everyday interactions&#xA;&#xA;&#xA;    are an equally important statement.&#xA;&#xA;&#xA;    I believe that&#xA;&#xA;&#xA;    setting a high standard&#xA;&#xA;&#xA;    for those everyday interactions&#xA;&#xA;&#xA;    makes extreme behavior&#xA;&#xA;&#xA;    that much clearer&#xA;&#xA;&#xA;    and easier to deal with.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    I have no doubts that&#xA;&#xA;&#xA;    the Go community can be&#xA;&#xA;&#xA;    one of the most&#xA;&#xA;&#xA;    friendly,&#xA;&#xA;&#xA;    welcoming,&#xA;&#xA;&#xA;    considerate,&#xA;&#xA;&#xA;    and&#xA;&#xA;&#xA;    respectful communities&#xA;&#xA;&#xA;    in the tech industry.&#xA;&#xA;&#xA;    We can make that happen,&#xA;&#xA;&#xA;    and it will be&#xA;&#xA;&#xA;    a benefit and credit to us all.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Andrew Gerrand&#xA;&#xA;&#xA;    has been leading the effort&#xA;&#xA;&#xA;    to adopt an appropriate Code of Conduct&#xA;&#xA;&#xA;    for the Go community.&#xA;&#xA;&#xA;    If you have suggestions,&#xA;&#xA;&#xA;    or concerns,&#xA;&#xA;&#xA;    or experience with Codes of Conduct,&#xA;&#xA;&#xA;    or want to be involved,&#xA;&#xA;&#xA;    please find Andrew or me&#xA;&#xA;&#xA;    during the conference.&#xA;&#xA;&#xA;    If you&amp;#39;ll still be here on Friday,&#xA;&#xA;&#xA;    Andrew and I are going to block off&#xA;&#xA;&#xA;    some time for Code of Conduct discussions&#xA;&#xA;&#xA;    during Hack Day.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Again, we don&amp;#39;t know&#xA;&#xA;&#xA;    where the next great idea will come from.&#xA;&#xA;&#xA;    We need all the help we can get.&#xA;&#xA;&#xA;    We need a large, diverse Go community.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_8.&#34;&gt;Thank You&lt;/h4&gt;&#xA;  &#xA;  &#xA;  &lt;p&gt;&#xA;    I consider the many people&#xA;&#xA;&#xA;    releasing software for download using “go get,”&#xA;&#xA;&#xA;    sharing their insights via blog posts,&#xA;&#xA;&#xA;    or helping others on the mailing lists or IRC&#xA;&#xA;&#xA;    to be part of this broad open source effort,&#xA;&#xA;&#xA;    part of the Go community.&#xA;&#xA;&#xA;    Everyone here today is also part of that community.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Thank you in advance&#xA;&#xA;&#xA;    to the presenters&#xA;&#xA;&#xA;    who over the next few days&#xA;&#xA;&#xA;    will take time to share their experiences&#xA;&#xA;&#xA;    using and extending Go.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Thank you in advance&#xA;&#xA;&#xA;    to all of you in the audience&#xA;&#xA;&#xA;    for taking the time to be here,&#xA;&#xA;&#xA;    to ask questions,&#xA;&#xA;&#xA;    and to let us know&#xA;&#xA;&#xA;    how Go is working for you.&#xA;&#xA;&#xA;    When you go back home,&#xA;&#xA;&#xA;    please continue to share what you&amp;#39;ve learned.&#xA;&#xA;&#xA;    Even if you don&amp;#39;t use Go&#xA;&#xA;&#xA;    for daily work,&#xA;&#xA;&#xA;    we&amp;#39;d love to see what&amp;#39;s working for Go&#xA;&#xA;&#xA;    adopted in other contexts,&#xA;&#xA;&#xA;    just as we&amp;#39;re always looking for good ideas&#xA;&#xA;&#xA;    to bring back into Go.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Thank you all again&#xA;&#xA;&#xA;    for making the effort to be here&#xA;&#xA;&#xA;    and for being part of the Go community.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    For the next few days, please:&#xA;&#xA;&#xA;    tell us what we&amp;#39;re doing right,&#xA;&#xA;&#xA;    tell us what we&amp;#39;re doing wrong,&#xA;&#xA;&#xA;    and help us all work together&#xA;&#xA;&#xA;    to make Go even better.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Remember to&#xA;&#xA;&#xA;    be friendly,&#xA;&#xA;&#xA;    patient,&#xA;&#xA;&#xA;    welcoming,&#xA;&#xA;&#xA;    considerate,&#xA;&#xA;&#xA;    and respectful.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Above all, enjoy the conference.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;&#xA;    &#xA;  &#xA;&#xA;</content></entry><entry><title>Qihoo 360 and Go</title><id>tag:blog.golang.org,2013:blog.golang.org/qihoo</id><link rel="alternate" href="//blog.golang.org/qihoo"></link><published>2015-07-06T11:00:00+00:00</published><updated>2015-07-06T11:00:00+00:00</updated><author><name>Yang Zhou</name></author><summary type="html">&lt;i&gt;This guest blog post was written by Yang Zhou, Software Engineer at Qihoo 360.&lt;/i&gt;&#xA;</summary><content type="html">&#xA;&#xA;  &#xA;  &#xA;    &#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    &lt;i&gt;This guest blog post was written by Yang Zhou, Software Engineer at Qihoo 360.&lt;/i&gt;&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    &lt;a href=&#34;http://www.360safe.com/&#34; target=&#34;_blank&#34;&gt;Qihoo 360&lt;/a&gt; is a major provider of Internet and&#xA;&#xA;&#xA;    mobile security products and services in China, and operates a major&#xA;&#xA;&#xA;    Android-based mobile distribution platform. At the end of June 2014, Qihoo had&#xA;&#xA;&#xA;    about 500 million monthly active PC Internet users and over 640 million mobile&#xA;&#xA;&#xA;    users. Qihoo also operates one of China’s most popular Internet browsers and PC&#xA;&#xA;&#xA;    search engines.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    My team, the Push Service Team, provides fundamental messaging services for&#xA;&#xA;&#xA;    more than 50 products across the company (both PC and mobile), including&#xA;&#xA;&#xA;    thousands of Apps in our open platform.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    Our &amp;#34;love affair&amp;#34; with Go dates back to 2012 when we first attempted to provide&#xA;&#xA;&#xA;    push services for one of Qihoo’s products. The initial version was built with&#xA;&#xA;&#xA;    nginx + lua + redis, which failed to satisfy our requirement for real-time&#xA;&#xA;&#xA;    performance due to excessive load. Under these circumstances, the&#xA;&#xA;&#xA;    newly-published Go 1.0.3 release came to our attention. We completed a&#xA;&#xA;&#xA;    prototype in a matter of weeks, largely thanks to the goroutine and channel&#xA;&#xA;&#xA;    features it provided.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    Initially, our Go-based system ran on 20 servers, with 20 million real-time&#xA;&#xA;&#xA;    connections in total. The system sent 2 million messages a day. That system now&#xA;&#xA;&#xA;    runs on 400 servers, supporting 200 million+ real-time connections. It now&#xA;&#xA;&#xA;    sends over 10 billion messages daily.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    With rapid business expansion and increasing application needs for our push&#xA;&#xA;&#xA;    service, the initial Go system quickly reached its bottleneck: heap size went&#xA;&#xA;&#xA;    up to 69G, with maximum garbage collection (GC) pauses of 3-6 seconds. Worse&#xA;&#xA;&#xA;    still, we had to reboot the system every week to release memory. It wouldn’t be&#xA;&#xA;&#xA;    honest if we didn’t consider relinquishing Go and instead, re-writing the&#xA;&#xA;&#xA;    entire core component with C. However, things didn’t go exactly as we planned,&#xA;&#xA;&#xA;    we ran into trouble migrating the code of Business Logic Layer. As a result, it&#xA;&#xA;&#xA;    was impossible for the only personnel at that time (myself) to maintain the Go&#xA;&#xA;&#xA;    system while ensuring the logic transfer to the C service framework.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    Therefore, I made the decision to stay with Go system (probably the wisest one&#xA;&#xA;&#xA;    I had to make), and great headway was made soon enough.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    Here are a few tweaks we made and key take-aways:&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &lt;ul&gt;&#xA;  &#xA;    &lt;li&gt;Replace short connections with persistent ones (using a connection pool), to reduce creation of buffers and objects during communication.&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;Use Objects and Memory pools appropriately, to reduce the load on the GC.&lt;/li&gt;&#xA;  &#xA;  &lt;/ul&gt;&#xA;&#xA;      &#xA;        &#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;qihoo/image00.png&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;      &#xA;        &#xA;  &lt;ul&gt;&#xA;  &#xA;    &lt;li&gt;Use a Task Pool, a mechanism with a group of long-lived goroutines consuming global task or message queues sent by connection goroutines, to replace short-lived goroutines.&lt;/li&gt;&#xA;  &#xA;  &lt;/ul&gt;&#xA;&#xA;      &#xA;        &#xA;  &lt;ul&gt;&#xA;  &#xA;    &lt;li&gt;Monitor and control goroutine numbers in the program. The lack of control can cause unbearable burden on the GC, imposed by surges in goroutines due to uninhibited acceptance of external requests, as RPC invocations sent to inner servers may block goroutines recently created.&lt;/li&gt;&#xA;  &#xA;  &lt;/ul&gt;&#xA;&#xA;      &#xA;        &#xA;  &lt;ul&gt;&#xA;  &#xA;    &lt;li&gt;Remember to add &lt;a href=&#34;http://golang.org/pkg/net/#Conn&#34; target=&#34;_blank&#34;&gt;read and write deadlines&lt;/a&gt; to connections when under a mobile network; otherwise, it may lead to goroutine blockage. Apply it properly and with caution when under a LAN network, otherwise your RPC communication efficiency will be hurt.&lt;/li&gt;&#xA;  &#xA;  &lt;/ul&gt;&#xA;&#xA;      &#xA;        &#xA;  &lt;ul&gt;&#xA;  &#xA;    &lt;li&gt;Use Pipeline (under Full Duplex feature of TCP) to enhance the communication efficiency of RPC framework.&lt;/li&gt;&#xA;  &#xA;  &lt;/ul&gt;&#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    As a result, we successfully launched three iterations of our architecture, and two iterations of our RPC framework even with limited human resources. This can all attributed to the development convenience of Go. Below you can find the up-to-date system architecture:&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;qihoo/image01.png&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    The continuous improvement journey can be illustrated by a table:&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;qihoo/table.png&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    Also, no temporary release of memory or system reboot is required after these&#xA;&#xA;&#xA;    optimizations.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    What’s more exciting is we developed an on-line real-time Visibility Platform&#xA;&#xA;&#xA;    for profiling Go programs. We can now easily access and diagnose the system&#xA;&#xA;&#xA;    status, pinning down any potential risks. Here is a screen shot of the system&#xA;&#xA;&#xA;    in action:&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;qihoo/image02.png&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;      &#xA;        &#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;qihoo/image03.png&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    The great thing about this platform is that we can actually simulate the&#xA;&#xA;&#xA;    connection and behavior of millions of online users, by applying the&#xA;&#xA;&#xA;    Distributed Stress Test Tool (also built using Go), and observe all real-time&#xA;&#xA;&#xA;    visualized data. This allows us to evaluate the effectiveness of any&#xA;&#xA;&#xA;    optimization and preclude problems by identifying system bottlenecks.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    Almost every possible system optimization has been practiced so far. And we&#xA;&#xA;&#xA;    look forward to more good news from the GC team so that we could be further&#xA;&#xA;&#xA;    relieved from heavy development work. I guess our experience may also grow&#xA;&#xA;&#xA;    obsolete one day, as Go continues to evolve.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    This is why I want to conclude my sharing by extending my sincere appreciation&#xA;&#xA;&#xA;    to the opportunity to attend &lt;a href=&#34;http://gopherchina.org/&#34; target=&#34;_blank&#34;&gt;Gopher China&lt;/a&gt;.&#xA;&#xA;&#xA;    It was a gala for us to learn, to share and for offering a window showcasing&#xA;&#xA;&#xA;    Go’s popularity and prosperity in China. Many other teams within Qihoo have&#xA;&#xA;&#xA;    already either got to know Go, or tried to use Go.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    I am convinced that many more Chinese Internet firms will join us in&#xA;&#xA;&#xA;    re-creating their system in Go and the Go team&amp;#39;s efforts will benefit more&#xA;&#xA;&#xA;    developers and enterprises in the foreseeable future.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;    &#xA;  &#xA;&#xA;</content></entry><entry><title>GopherChina Trip Report</title><id>tag:blog.golang.org,2013:blog.golang.org/gopherchina</id><link rel="alternate" href="//blog.golang.org/gopherchina"></link><published>2015-07-01T11:00:00+00:00</published><updated>2015-07-01T11:00:00+00:00</updated><author><name>Robert Griesemer</name></author><summary type="html">We have known for some time that Go is more popular in China than in any other&#xA;country.&#xA;According to Google Trends, most &lt;a href=&#34;https://www.google.com/trends/explore#q=golang&#34; target=&#34;_blank&#34;&gt;searches for the term “golang”&lt;/a&gt; come from The People’s Republic than anywhere else.&#xA;&lt;a href=&#34;http://herman.asia/why-is-go-popular-in-china&#34; target=&#34;_blank&#34;&gt;Others&lt;/a&gt; have speculated on&#xA;the same observation, yet so far we have had&#xA;&lt;a href=&#34;https://news.ycombinator.com/item?id=8872400&#34; target=&#34;_blank&#34;&gt;sparse concrete information&lt;/a&gt;&#xA;about the phenomenon.&#xA;</summary><content type="html">&#xA;&#xA;  &#xA;  &#xA;    &#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    We have known for some time that Go is more popular in China than in any other&#xA;&#xA;&#xA;    country.&#xA;&#xA;&#xA;    According to Google Trends, most &lt;a href=&#34;https://www.google.com/trends/explore#q=golang&#34; target=&#34;_blank&#34;&gt;searches for the term “golang”&lt;/a&gt; come from The People’s Republic than anywhere else.&#xA;&#xA;&#xA;    &lt;a href=&#34;http://herman.asia/why-is-go-popular-in-china&#34; target=&#34;_blank&#34;&gt;Others&lt;/a&gt; have speculated on&#xA;&#xA;&#xA;    the same observation, yet so far we have had&#xA;&#xA;&#xA;    &lt;a href=&#34;https://news.ycombinator.com/item?id=8872400&#34; target=&#34;_blank&#34;&gt;sparse concrete information&lt;/a&gt;&#xA;&#xA;&#xA;    about the phenomenon.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    The first Go conference in China, &lt;a href=&#34;http://gopherchina.org/&#34; target=&#34;_blank&#34;&gt;GopherChina&lt;/a&gt;,&#xA;&#xA;&#xA;    seemed like an excellent opportunity to explore the situation by putting some&#xA;&#xA;&#xA;    Western Gopher feet on Chinese ground. An actual invitation made it real and I&#xA;&#xA;&#xA;    decided to accept and give a presentation about gofmt’s impact on software&#xA;&#xA;&#xA;    development.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;gopherchina/image04.jpg&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    &lt;i&gt;Hello, Shanghai!&lt;/i&gt;&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    The conference took place over an April weekend in Shanghai, in the&#xA;&#xA;&#xA;    &lt;a href=&#34;https://www.google.com/maps/place/Puruan+Bldg,+Pudong,+Shanghai,+China&#34; target=&#34;_blank&#34;&gt;Puruan Building&lt;/a&gt;&#xA;&#xA;&#xA;    of the Shanghai Pudong Software Park, easily reachable by subway within an hour&#xA;&#xA;&#xA;    or less from Shanghai’s more central parts.&#xA;&#xA;&#xA;    Modelled after &lt;a href=&#34;http://www.gophercon.com&#34; target=&#34;_blank&#34;&gt;GopherCon&lt;/a&gt;, the conference was&#xA;&#xA;&#xA;    single-track, with all talks presented in a conference room that fit about 400&#xA;&#xA;&#xA;    attendees.&#xA;&#xA;&#xA;    It was organized by volunteers, lead by &lt;a href=&#34;https://github.com/astaxie&#34; target=&#34;_blank&#34;&gt;Asta Xie&lt;/a&gt;,&#xA;&#xA;&#xA;    and with robust sponsorship from major industry names. According to the&#xA;&#xA;&#xA;    organizers, many more people were hoping to attend than could be accommodated&#xA;&#xA;&#xA;    due to space constraints.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;gopherchina/image01.jpg&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    &lt;i&gt;The welcoming committee with Asta Xie (2nd from left), the primary organizer.&lt;/i&gt;&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    Each attendee received a bag filled with the obligatory GopherChina t-shirt,&#xA;&#xA;&#xA;    various sponsor-related informational brochures, stickers, and the occasional&#xA;&#xA;&#xA;    stuffed “something” (no fluffy Gophers, though). At least one 3rd party vendor&#xA;&#xA;&#xA;    was advertising technical books, including several original (not translated&#xA;&#xA;&#xA;    from English) Go books.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;gopherchina/image05.jpg&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    &lt;i&gt;Go books!&lt;/i&gt;&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    On first impression, the average attendee seemed pretty young, which made for&#xA;&#xA;&#xA;    an enthusiastic crowd, and the event appeared well run.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    With the exception of my talk, all presentations were given in Mandarin and&#xA;&#xA;&#xA;    thus were incomprehensible to me. Asta Xie, the primary organizer, assisted&#xA;&#xA;&#xA;    with a few simultaneous translations whispered into my ear, and the occasional&#xA;&#xA;&#xA;    English slide provided additional clues: “69GB” stands out even without any&#xA;&#xA;&#xA;    Mandarin knowledge (more on that below). Consequently, I ended up listening to&#xA;&#xA;&#xA;    a handful of presentations only, and instead spent much of my time talking with&#xA;&#xA;&#xA;    attendees outside the main conference room. Yet judging from the slides, the&#xA;&#xA;&#xA;    quality of most presentations seemed high, comparable with our experience at&#xA;&#xA;&#xA;    GopherCon in Denver last year. Each talk got a one hour time slot which allowed&#xA;&#xA;&#xA;    for plenty of technical detail, and many (dozens) of questions from an&#xA;&#xA;&#xA;    enthusiastic audience.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    As expected, many of the presentations were about web services, backends for&#xA;&#xA;&#xA;    mobile applications, and so on. Some of the systems appear to be huge by any&#xA;&#xA;&#xA;    measure.&#xA;&#xA;&#xA;    For instance, a talk by &lt;a href=&#34;http://gopherchina.org/user/zhouyang&#34; target=&#34;_blank&#34;&gt;Yang Zhou&lt;/a&gt;&#xA;&#xA;&#xA;    described a large-scale internal messaging system, used by&#xA;&#xA;&#xA;    &lt;a href=&#34;http://www.360.cn/&#34; target=&#34;_blank&#34;&gt;Qihoo 360&lt;/a&gt;, a major Chinese software firm, all written&#xA;&#xA;&#xA;    in Go. The presentation discussed how his team managed to reduce an original&#xA;&#xA;&#xA;    heap size of 69GB (!) and the resulting long GC pauses of 3-6s to more&#xA;&#xA;&#xA;    manageable numbers, and how they run millions of goroutines per machine, on a&#xA;&#xA;&#xA;    fleet of thousands of machines. A future guest blog post is planned describing&#xA;&#xA;&#xA;    this system in more detail.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;gopherchina/image03.jpg&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    &lt;i&gt;Packed conference room on Saturday.&lt;/i&gt;&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    In another presentation, &lt;a href=&#34;http://gopherchina.org/user/guofeng&#34; target=&#34;_blank&#34;&gt;Feng Guo&lt;/a&gt; from&#xA;&#xA;&#xA;    &lt;a href=&#34;https://www.daocloud.io/&#34; target=&#34;_blank&#34;&gt;DaoCloud&lt;/a&gt; talked about how they use Go in their&#xA;&#xA;&#xA;    company for what they call the “continuous delivery” of applications. DaoCloud&#xA;&#xA;&#xA;    takes care of automatically moving software hosted on GitHub (and Chinese&#xA;&#xA;&#xA;    equivalents) to the cloud. A software developer simply pushes a new version on&#xA;&#xA;&#xA;    GitHub and DaoCloud takes care of the rest: running tests,&#xA;&#xA;&#xA;    &lt;a href=&#34;https://www.docker.com/&#34; target=&#34;_blank&#34;&gt;Dockerizing&lt;/a&gt; it, and shipping it using your&#xA;&#xA;&#xA;    preferred cloud service provider.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    Several speakers were from well-recognized major software firms (I showed the&#xA;&#xA;&#xA;    conference program to non-technical people and they easily recognized several&#xA;&#xA;&#xA;    of the firm’s names). Much more so than in the US, it seems Go is not just&#xA;&#xA;&#xA;    hugely popular with newcomers and startups, but has very much found its way&#xA;&#xA;&#xA;    into larger organizations and is employed at a scale that we are only starting&#xA;&#xA;&#xA;    to see elsewhere.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    Not being an expert in web services myself, in my presentation I veered off the&#xA;&#xA;&#xA;    general conference theme a bit by talking about&#xA;&#xA;&#xA;    &lt;a href=&#34;https://golang.org/cmd/gofmt/&#34; target=&#34;_blank&#34;&gt;gofmt&lt;/a&gt; and how its widespread use has started&#xA;&#xA;&#xA;    to shape expectations not just for Go but other languages as well.&#xA;&#xA;&#xA;    I presented in English but had my slides translated to Mandarin beforehand. Due&#xA;&#xA;&#xA;    to the significant language barrier I wasn’t expecting too many questions on my&#xA;&#xA;&#xA;    talk itself.&#xA;&#xA;&#xA;    Instead I decided the keep it short and leave plenty of time for general&#xA;&#xA;&#xA;    questions on Go, which the audience appreciated.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;gopherchina/image06.jpg&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    &lt;i&gt;No social event in China is complete without fantastic food.&lt;/i&gt;&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    A couple of days after the conference I visited the 4-year-old startup company&#xA;&#xA;&#xA;    &lt;a href=&#34;http://www.qiniu.com/&#34; target=&#34;_blank&#34;&gt;Qiniu&lt;/a&gt; (“Seven Bulls”), at the invitation of its&#xA;&#xA;&#xA;    &lt;a href=&#34;http://gopherchina.org/user/xushiwei&#34; target=&#34;_blank&#34;&gt;CEO&lt;/a&gt; Wei Hsu, facilitated and&#xA;&#xA;&#xA;    translated with the help of Asta Xie. Qiniu is a cloud-based storage provider&#xA;&#xA;&#xA;    for mobile applications; Wei Hsu presented at the conference and also happens&#xA;&#xA;&#xA;    to be the author of one of the first Chinese books on Go (the leftmost one in&#xA;&#xA;&#xA;    the picture above).&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;gopherchina/image02.jpg&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;      &#xA;        &#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;gopherchina/image00.jpg&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    &lt;i&gt;Qiniu lobby, engineering.&lt;/i&gt;&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    Qiniu is an extremely successful all-Go shop, with about 160 employees, serving&#xA;&#xA;&#xA;    over 150,000 companies and developers, storing over 50 Billion files, and&#xA;&#xA;&#xA;    growing by over 500 Million files per day. When asked about the reasons for&#xA;&#xA;&#xA;    Go’s success in China, Wei Hsu is quick to answer: PHP is extremely popular in&#xA;&#xA;&#xA;    China, but relatively slow and not well-suited for large systems. Like in the&#xA;&#xA;&#xA;    US, universities teach C++ and Java as primary languages, but for many&#xA;&#xA;&#xA;    applications C++ is too complex a tool and Java too bulky. In his opinion, Go&#xA;&#xA;&#xA;    now plays the role that traditionally belonged to PHP, but Go runs much faster,&#xA;&#xA;&#xA;    is type safe, and scales more easily. He loves the fact that Go is simple and&#xA;&#xA;&#xA;    applications are easy to deploy. He thought the language to be “perfect” for&#xA;&#xA;&#xA;    them and his primary request was for a recommended or even standardized package&#xA;&#xA;&#xA;    to easily access database systems. He did mention that they had GC problems in&#xA;&#xA;&#xA;    the past but were able to work around them. Hopefully our upcoming 1.5 release&#xA;&#xA;&#xA;    will address this. For Qiniu, Go appeared just at the right time and the right&#xA;&#xA;&#xA;    (open source) place.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    According to Asta Xie, Qiniu is just one of many Go shops in the PRC. Large&#xA;&#xA;&#xA;    companies such as Alibaba, Baidu, Tencent, and Weibo, are now all using Go in&#xA;&#xA;&#xA;    one form or another. He pointed out that while Shanghai and neighboring cities&#xA;&#xA;&#xA;    like &lt;a href=&#34;https://www.google.com/maps/place/Suzhou,+Jiangsu,+China&#34; target=&#34;_blank&#34;&gt;Suzhou&lt;/a&gt; are&#xA;&#xA;&#xA;    high-tech centres, even more software developers are found in the Beijing area.&#xA;&#xA;&#xA;    For 2016,  Asta hopes to organize a larger (1000, perhaps 1500 people)&#xA;&#xA;&#xA;    successor conference in Beijing.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    It appears that we have found the Go users in China: They are everywhere!&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;        &#xA;  &#xA;  &lt;p&gt;&#xA;    &lt;i&gt;Some of the GopherChina materials, including videos, are now available alongside Go coursework on a&lt;/i&gt; &lt;a href=&#34;http://www.imooc.com/view/407&#34; target=&#34;_blank&#34;&gt;&lt;i&gt;3rd party site&lt;/i&gt;&lt;/a&gt;.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;      &#xA;    &#xA;  &#xA;&#xA;</content></entry><entry><title>Testable Examples in Go</title><id>tag:blog.golang.org,2013:blog.golang.org/examples</id><link rel="alternate" href="//blog.golang.org/examples"></link><published>2015-05-07T11:00:00+00:00</published><updated>2015-05-07T11:00:00+00:00</updated><author><name>Andrew Gerrand</name></author><summary type="html">Godoc &lt;a href=&#34;http://golang.org/pkg/testing/#hdr-Examples&#34; target=&#34;_blank&#34;&gt;examples&lt;/a&gt; are snippets of&#xA;Go code that are displayed as package documentation and that are verified by&#xA;running them as tests.&#xA;They can also be run by a user visiting the godoc web page for the package&#xA;and clicking the associated &amp;#34;Run&amp;#34; button.&#xA;</summary><content type="html">&#xA;&#xA;  &#xA;  &#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_1.&#34;&gt;Introduction&lt;/h4&gt;&#xA;  &#xA;  &#xA;  &lt;p&gt;&#xA;    Godoc &lt;a href=&#34;http://golang.org/pkg/testing/#hdr-Examples&#34; target=&#34;_blank&#34;&gt;examples&lt;/a&gt; are snippets of&#xA;&#xA;&#xA;    Go code that are displayed as package documentation and that are verified by&#xA;&#xA;&#xA;    running them as tests.&#xA;&#xA;&#xA;    They can also be run by a user visiting the godoc web page for the package&#xA;&#xA;&#xA;    and clicking the associated &amp;#34;Run&amp;#34; button.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Having executable documentation for a package guarantees that the information&#xA;&#xA;&#xA;    will not go out of date as the API changes.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    The standard library includes many such examples&#xA;&#xA;&#xA;    (see the &lt;a href=&#34;http://golang.org/pkg/strings/#Contains&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;strings&lt;/code&gt; package&lt;/a&gt;,&#xA;&#xA;&#xA;    for instance).&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    This article explains how to write your own example functions.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_2.&#34;&gt;Examples are tests&lt;/h4&gt;&#xA;  &#xA;  &#xA;  &lt;p&gt;&#xA;    Examples are compiled (and optionally executed) as part of a package&amp;#39;s test&#xA;&#xA;&#xA;    suite.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    As with typical tests, examples are functions that reside in a package&amp;#39;s&#xA;&#xA;&#xA;    &lt;code&gt;_test.go&lt;/code&gt; files.&#xA;&#xA;&#xA;    Unlike normal test functions, though, example functions take no arguments&#xA;&#xA;&#xA;    and begin with the word &lt;code&gt;Example&lt;/code&gt; instead of &lt;code&gt;Test&lt;/code&gt;.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    The &lt;a href=&#34;https://godoc.org/github.com/golang/example/stringutil/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;stringutil&lt;/code&gt; package&lt;/a&gt;&#xA;&#xA;&#xA;    is part of the &lt;a href=&#34;https://github.com/golang/example&#34; target=&#34;_blank&#34;&gt;Go example repository&lt;/a&gt;.&#xA;&#xA;&#xA;    Here&amp;#39;s an example that demonstrates its &lt;code&gt;Reverse&lt;/code&gt; function:&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;div class=&#34;code&#34;&gt;&lt;pre&gt;package stringutil_test&#xA;&#xA;import (&#xA;    &amp;#34;fmt&amp;#34;&#xA;&#xA;    &amp;#34;github.com/golang/example/stringutil&amp;#34;&#xA;)&#xA;&#xA;func ExampleReverse() {&#xA;    fmt.Println(stringutil.Reverse(&amp;#34;hello&amp;#34;))&#xA;    // Output: olleh&#xA;}&lt;/pre&gt;&lt;/div&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    This code might live in &lt;code&gt;example_test.go&lt;/code&gt; in the &lt;code&gt;stringutil&lt;/code&gt; directory.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Godoc will present this example alongside the &lt;code&gt;Reverse&lt;/code&gt; function&amp;#39;s documentation:&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;examples/reverse.png&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Running the package&amp;#39;s test suite, we can see the example function is executed&#xA;&#xA;&#xA;    with no further arrangement from us:&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;div class=&#34;code&#34;&gt;&lt;pre&gt;$ go test -v&#xA;=== RUN TestReverse&#xA;--- PASS: TestReverse (0.00s)&#xA;=== RUN: ExampleReverse&#xA;--- PASS: ExampleReverse (0.00s)&#xA;PASS&#xA;ok      github.com/golang/example/stringutil    0.009s&lt;/pre&gt;&lt;/div&gt;&#xA;  &#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_3.&#34;&gt;Output comments&lt;/h4&gt;&#xA;  &#xA;  &#xA;  &lt;p&gt;&#xA;    What does it mean that the &lt;code&gt;ExampleReverse&lt;/code&gt; function &amp;#34;passes&amp;#34;?&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    As it executes the example,&#xA;&#xA;&#xA;    the testing framework captures data written to standard output&#xA;&#xA;&#xA;    and then compares the output against the example&amp;#39;s &amp;#34;Output:&amp;#34; comment.&#xA;&#xA;&#xA;    The test passes if the test&amp;#39;s output matches its output comment.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    To see a failing example we can change the output comment text to something&#xA;&#xA;&#xA;    obviously incorrect&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;div class=&#34;code&#34;&gt;&lt;pre&gt;func ExampleReverse() {&#xA;    fmt.Println(stringutil.Reverse(&amp;#34;hello&amp;#34;))&#xA;    // Output: golly&#xA;}&lt;/pre&gt;&lt;/div&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    and run the tests again:&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;div class=&#34;code&#34;&gt;&lt;pre&gt;$ go test&#xA;--- FAIL: ExampleReverse (0.00s)&#xA;got:&#xA;olleh&#xA;want:&#xA;golly&#xA;FAIL&lt;/pre&gt;&lt;/div&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    If we remove the output comment entirely&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;div class=&#34;code&#34;&gt;&lt;pre&gt;func ExampleReverse() {&#xA;    fmt.Println(stringutil.Reverse(&amp;#34;hello&amp;#34;))&#xA;}&lt;/pre&gt;&lt;/div&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    then the example function is compiled but not executed:&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;div class=&#34;code&#34;&gt;&lt;pre&gt;$ go test -v&#xA;=== RUN TestReverse&#xA;--- PASS: TestReverse (0.00s)&#xA;PASS&#xA;ok      github.com/golang/example/stringutil    0.009s&lt;/pre&gt;&lt;/div&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Examples without output comments are useful for demonstrating code that cannot&#xA;&#xA;&#xA;    run as unit tests, such as that which accesses the network, &#xA;&#xA;&#xA;    while guaranteeing the example at least compiles.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_4.&#34;&gt;Example function names&lt;/h4&gt;&#xA;  &#xA;  &#xA;  &lt;p&gt;&#xA;    Godoc uses a naming convention to associate an example function with a&#xA;&#xA;&#xA;    package-level identifier.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;div class=&#34;code&#34;&gt;&lt;pre&gt;func ExampleFoo()     // documents the Foo function or type&#xA;func ExampleBar_Qux() // documents the Qux method of type Bar&#xA;func Example()        // documents the package as a whole&lt;/pre&gt;&lt;/div&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Following this convention, godoc displays the &lt;code&gt;ExampleReverse&lt;/code&gt; example&#xA;&#xA;&#xA;    alongside the documentation for the &lt;code&gt;Reverse&lt;/code&gt; function.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Multiple examples can be provided for a given identifier by using a suffix&#xA;&#xA;&#xA;    beginning with an underscore followed by a lowercase letter.&#xA;&#xA;&#xA;    Each of these examples documents the &lt;code&gt;Reverse&lt;/code&gt; function:&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;div class=&#34;code&#34;&gt;&lt;pre&gt;func ExampleReverse()&#xA;func ExampleReverse_second()&#xA;func ExampleReverse_third()&lt;/pre&gt;&lt;/div&gt;&#xA;  &#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_5.&#34;&gt;Larger examples&lt;/h4&gt;&#xA;  &#xA;  &#xA;  &lt;p&gt;&#xA;    Sometimes we need more than just a function to write a good example.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    For instance, to demonstrate the &lt;a href=&#34;https://golang.org/pkg/sort/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;sort&lt;/code&gt; package&lt;/a&gt;&#xA;&#xA;&#xA;    we should show an implementation of &lt;code&gt;sort.Interface&lt;/code&gt;. &#xA;&#xA;&#xA;    Since methods cannot be declared inside a function body, the example must&#xA;&#xA;&#xA;    include some context in addition to the example function.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    To achieve this we can use a &amp;#34;whole file example.&amp;#34;&#xA;&#xA;&#xA;    A whole file example is a file that ends in &lt;code&gt;_test.go&lt;/code&gt; and contains exactly one&#xA;&#xA;&#xA;    example function, no test or benchmark functions, and at least one other&#xA;&#xA;&#xA;    package-level declaration.&#xA;&#xA;&#xA;    When displaying such examples godoc will show the entire file.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Here is a whole file example from the &lt;code&gt;sort&lt;/code&gt; package:&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;div class=&#34;code&#34;&gt;&lt;pre&gt;package sort_test&#xA;&#xA;import (&#xA;    &amp;#34;fmt&amp;#34;&#xA;    &amp;#34;sort&amp;#34;&#xA;)&#xA;&#xA;type Person struct {&#xA;    Name string&#xA;    Age  int&#xA;}&#xA;&#xA;func (p Person) String() string {&#xA;    return fmt.Sprintf(&amp;#34;%s: %d&amp;#34;, p.Name, p.Age)&#xA;}&#xA;&#xA;// ByAge implements sort.Interface for []Person based on&#xA;// the Age field.&#xA;type ByAge []Person&#xA;&#xA;func (a ByAge) Len() int           { return len(a) }&#xA;func (a ByAge) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }&#xA;func (a ByAge) Less(i, j int) bool { return a[i].Age &amp;lt; a[j].Age }&#xA;&#xA;func Example() {&#xA;    people := []Person{&#xA;        {&amp;#34;Bob&amp;#34;, 31},&#xA;        {&amp;#34;John&amp;#34;, 42},&#xA;        {&amp;#34;Michael&amp;#34;, 17},&#xA;        {&amp;#34;Jenny&amp;#34;, 26},&#xA;    }&#xA;&#xA;    fmt.Println(people)&#xA;    sort.Sort(ByAge(people))&#xA;    fmt.Println(people)&#xA;&#xA;    // Output:&#xA;    // [Bob: 31 John: 42 Michael: 17 Jenny: 26]&#xA;    // [Michael: 17 Jenny: 26 Bob: 31 John: 42]&#xA;}&lt;/pre&gt;&lt;/div&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    A package can contain multiple whole file examples; one example per file.&#xA;&#xA;&#xA;    Take a look at the &lt;a href=&#34;https://golang.org/src/sort/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;sort&lt;/code&gt; package&amp;#39;s source code&lt;/a&gt;&#xA;&#xA;&#xA;    to see this in practice.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_6.&#34;&gt;Conclusion&lt;/h4&gt;&#xA;  &#xA;  &#xA;  &lt;p&gt;&#xA;    Godoc examples are a great way to write and maintain code as documentation.&#xA;&#xA;&#xA;    They also present editable, working, runnable examples your users can build on.&#xA;&#xA;&#xA;    Use them!&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;&#xA;    &#xA;  &#xA;&#xA;</content></entry><entry><title>Package names</title><id>tag:blog.golang.org,2013:blog.golang.org/package-names</id><link rel="alternate" href="//blog.golang.org/package-names"></link><published>2015-02-04T11:00:00+00:00</published><updated>2015-02-04T11:00:00+00:00</updated><author><name>Sameer Ajmani</name></author><summary type="html">Go code is organized into packages.&#xA;Within a package, code can refer to any identifier (name) defined within, while&#xA;clients of the package may only reference the package&amp;#39;s exported types,&#xA;functions, constants, and variables.&#xA;Such references always include the package name as a prefix: &lt;code&gt;foo.Bar&lt;/code&gt; refers to&#xA;the exported name &lt;code&gt;Bar&lt;/code&gt; in the imported package named &lt;code&gt;foo&lt;/code&gt;.&#xA;</summary><content type="html">&#xA;&#xA;  &#xA;  &#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_1.&#34;&gt;Introduction&lt;/h4&gt;&#xA;  &#xA;  &#xA;  &lt;p&gt;&#xA;    Go code is organized into packages.&#xA;&#xA;&#xA;    Within a package, code can refer to any identifier (name) defined within, while&#xA;&#xA;&#xA;    clients of the package may only reference the package&amp;#39;s exported types,&#xA;&#xA;&#xA;    functions, constants, and variables.&#xA;&#xA;&#xA;    Such references always include the package name as a prefix: &lt;code&gt;foo.Bar&lt;/code&gt; refers to&#xA;&#xA;&#xA;    the exported name &lt;code&gt;Bar&lt;/code&gt; in the imported package named &lt;code&gt;foo&lt;/code&gt;.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Good package names make code better.&#xA;&#xA;&#xA;    A package&amp;#39;s name provides context for its contents, making it easier for clients&#xA;&#xA;&#xA;    to understand what the package is for and how to use it.&#xA;&#xA;&#xA;    The name also helps package maintainers determine what does and does not belong&#xA;&#xA;&#xA;    in the package as it evolves.&#xA;&#xA;&#xA;    Well-named packages make it easier to find the code you need.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Effective Go provides&#xA;&#xA;&#xA;    &lt;a href=&#34;https://golang.org/doc/effective_go.html#names&#34; target=&#34;_blank&#34;&gt;guidelines&lt;/a&gt; for naming&#xA;&#xA;&#xA;    packages, types, functions, and variables.&#xA;&#xA;&#xA;    This article expands on that discussion and surveys names found in the standard&#xA;&#xA;&#xA;    library.&#xA;&#xA;&#xA;    It also discusses bad package names and how to fix them.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_2.&#34;&gt;Package names&lt;/h4&gt;&#xA;  &#xA;  &#xA;  &lt;p&gt;&#xA;    Good package names are short and clear.&#xA;&#xA;&#xA;    They are lower case, with no &lt;code&gt;under_scores&lt;/code&gt; or &lt;code&gt;mixedCaps&lt;/code&gt;.&#xA;&#xA;&#xA;    They are often simple nouns, such as:&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &lt;ul&gt;&#xA;  &#xA;    &lt;li&gt;&lt;code&gt;time&lt;/code&gt; (provides functionality for measuring and displaying time)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;&lt;code&gt;list&lt;/code&gt; (implements a doubly linked list)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;&lt;code&gt;http&lt;/code&gt; (provides HTTP client and server implementations)&lt;/li&gt;&#xA;  &#xA;  &lt;/ul&gt;&#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    The style of names typical of another language might not be idiomatic in a Go&#xA;&#xA;&#xA;    program.&#xA;&#xA;&#xA;    Here are two examples of names that might be good style in other languages but&#xA;&#xA;&#xA;    do not fit well in Go:&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &lt;ul&gt;&#xA;  &#xA;    &lt;li&gt;&lt;code&gt;computeServiceClient&lt;/code&gt;&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;&lt;code&gt;priority_queue&lt;/code&gt;&lt;/li&gt;&#xA;  &#xA;  &lt;/ul&gt;&#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    A Go package may export several types and functions.&#xA;&#xA;&#xA;    For example, a &lt;code&gt;compute&lt;/code&gt; package could export a &lt;code&gt;Client&lt;/code&gt; type with methods for&#xA;&#xA;&#xA;    using the service as well as functions for partitioning a compute task across&#xA;&#xA;&#xA;    several clients.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    &lt;b&gt;Abbreviate judiciously.&lt;/b&gt;&#xA;&#xA;&#xA;    Package names may be abbreviated when the abbreviation is familiar to the&#xA;&#xA;&#xA;    programmer.&#xA;&#xA;&#xA;    Widely-used packages often have compressed names:&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &lt;ul&gt;&#xA;  &#xA;    &lt;li&gt;&lt;code&gt;strconv&lt;/code&gt; (string conversion)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;&lt;code&gt;syscall&lt;/code&gt; (system call)&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;&lt;code&gt;fmt&lt;/code&gt; (formatted I/O)&lt;/li&gt;&#xA;  &#xA;  &lt;/ul&gt;&#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    On the other hand, if abbreviating a package name makes it ambiguous or unclear,&#xA;&#xA;&#xA;    don&amp;#39;t do it.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    &lt;b&gt;Don&amp;#39;t steal good names from the user.&lt;/b&gt;&#xA;&#xA;&#xA;    Avoid giving a package a name that is commonly used in client code.&#xA;&#xA;&#xA;    For example, the buffered I/O package is called &lt;code&gt;bufio&lt;/code&gt;, not &lt;code&gt;buf&lt;/code&gt;, since &lt;code&gt;buf&lt;/code&gt;&#xA;&#xA;&#xA;    is a good variable name for a buffer.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_3.&#34;&gt;Naming package contents&lt;/h4&gt;&#xA;  &#xA;  &#xA;  &lt;p&gt;&#xA;    A package name and its contents&amp;#39; names are coupled, since client code uses them&#xA;&#xA;&#xA;    together.&#xA;&#xA;&#xA;    When designing a package, take the client&amp;#39;s point of view.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    &lt;b&gt;Avoid stutter.&lt;/b&gt;&#xA;&#xA;&#xA;    Since client code uses the package name as a prefix when referring to the&#xA;&#xA;&#xA;    package contents, the names for those contents need not repeat the package name.&#xA;&#xA;&#xA;    The HTTP server provided by the &lt;code&gt;http&lt;/code&gt; package is called &lt;code&gt;Server&lt;/code&gt;, not&#xA;&#xA;&#xA;    &lt;code&gt;HTTPServer&lt;/code&gt;.&#xA;&#xA;&#xA;    Client code refers to this type as &lt;code&gt;http.Server&lt;/code&gt;, so there is no ambiguity.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    &lt;b&gt;Simplify function names.&lt;/b&gt;&#xA;&#xA;&#xA;    When a function in package pkg returns a value of type &lt;code&gt;pkg.Pkg&lt;/code&gt; (or&#xA;&#xA;&#xA;    &lt;code&gt;*pkg.Pkg&lt;/code&gt;), the function name can often omit the type name without confusion:&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;div class=&#34;code&#34;&gt;&lt;pre&gt;start := time.Now()                                  // start is a time.Time&#xA;t, err := time.Parse(time.Kitchen, &amp;#34;6:06PM&amp;#34;)         // t is a time.Time&lt;/pre&gt;&lt;/div&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;div class=&#34;code&#34;&gt;&lt;pre&gt;ctx = context.WithTimeout(ctx, 10*time.Millisecond)  // ctx is a context.Context&#xA;ip, ok := userip.FromContext(ctx)                    // ip is a net.IP&lt;/pre&gt;&lt;/div&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    A function named &lt;code&gt;New&lt;/code&gt; in package &lt;code&gt;pkg&lt;/code&gt; returns a value of type &lt;code&gt;pkg.Pkg&lt;/code&gt;.&#xA;&#xA;&#xA;    This is a standard entry point for client code using that type:&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;div class=&#34;code&#34;&gt;&lt;pre&gt;q := list.New()  // q is a *list.List&lt;/pre&gt;&lt;/div&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    When a function returns a value of type &lt;code&gt;pkg.T&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is not &lt;code&gt;Pkg&lt;/code&gt;, the&#xA;&#xA;&#xA;    function name may include &lt;code&gt;T&lt;/code&gt; to make client code easier to understand.&#xA;&#xA;&#xA;    A common situation is a package with multiple New-like functions:&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;div class=&#34;code&#34;&gt;&lt;pre&gt;d, err := time.ParseDuration(&amp;#34;10s&amp;#34;)  // d is a time.Duration&#xA;elapsed := time.Since(start)         // elapsed is a time.Duration&#xA;ticker := time.NewTicker(d)          // ticker is a *time.Ticker&#xA;timer := time.NewTimer(d)            // timer is a *time.Timer&lt;/pre&gt;&lt;/div&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Types in different packages can have the same name, because from the client&amp;#39;s&#xA;&#xA;&#xA;    point of view such names are discriminated by the package name.&#xA;&#xA;&#xA;    For example, the standard library includes several types named &lt;code&gt;Reader&lt;/code&gt;,&#xA;&#xA;&#xA;    including &lt;code&gt;jpeg.Reader&lt;/code&gt;, &lt;code&gt;bufio.Reader&lt;/code&gt;, and &lt;code&gt;csv.Reader&lt;/code&gt;.&#xA;&#xA;&#xA;    Each package name fits with &lt;code&gt;Reader&lt;/code&gt; to yield a good type name.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    If you cannot come up with a package name that&amp;#39;s a meaningful prefix for the&#xA;&#xA;&#xA;    package&amp;#39;s contents, the package abstraction boundary may be wrong.&#xA;&#xA;&#xA;    Write code that uses your package as a client would, and restructure your&#xA;&#xA;&#xA;    packages if the result seems poor.&#xA;&#xA;&#xA;    This approach will yield packages that are easier for clients to understand and&#xA;&#xA;&#xA;    for the package developers to maintain.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_4.&#34;&gt;Package paths&lt;/h4&gt;&#xA;  &#xA;  &#xA;  &lt;p&gt;&#xA;    A Go package has both a name and a path.&#xA;&#xA;&#xA;    The package name is specified in the package statement of its source files;&#xA;&#xA;&#xA;    client code uses it as the prefix for the package&amp;#39;s exported names.&#xA;&#xA;&#xA;    Client code uses the package path when importing the package.&#xA;&#xA;&#xA;    By convention, the last element of the package path is the package name:&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;div class=&#34;code&#34;&gt;&lt;pre&gt;import (&#xA;    &amp;#34;fmt&amp;#34;                       // package fmt&#xA;    &amp;#34;os/exec&amp;#34;                   // package exec&#xA;    &amp;#34;golang.org/x/net/context&amp;#34;  // package context&#xA;)&lt;/pre&gt;&lt;/div&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Build tools map package paths onto directories.&#xA;&#xA;&#xA;    The go tool uses the &lt;a href=&#34;https://golang.org/doc/code.html#GOPATH&#34; target=&#34;_blank&#34;&gt;GOPATH&lt;/a&gt;&#xA;&#xA;&#xA;    environment variable to find the source files for path &lt;code&gt;&amp;#34;github.com/user/hello&amp;#34;&lt;/code&gt;&#xA;&#xA;&#xA;    in directory &lt;code&gt;$GOPATH/src/github.com/user/hello&lt;/code&gt;.&#xA;&#xA;&#xA;    (This situation should be familiar, of course, but it&amp;#39;s important to be clear&#xA;&#xA;&#xA;    about the terminology and structure of packages.)&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    &lt;b&gt;Directories.&lt;/b&gt;&#xA;&#xA;&#xA;    The standard library uses like directories &lt;code&gt;crypto&lt;/code&gt;, &lt;code&gt;container&lt;/code&gt;, &lt;code&gt;encoding&lt;/code&gt;,&#xA;&#xA;&#xA;    and &lt;code&gt;image&lt;/code&gt; to group packages for related protocols and algorithms.&#xA;&#xA;&#xA;    There is no actual relationship among the packages in one of these directories;&#xA;&#xA;&#xA;    a directory just provides a way to arrange the files.&#xA;&#xA;&#xA;    Any package can import any other package provided the import does not create a&#xA;&#xA;&#xA;    cycle.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Just as types in different packages can have the same name without ambiguity,&#xA;&#xA;&#xA;    packages in different directories can have the same name.&#xA;&#xA;&#xA;    For example,&#xA;&#xA;&#xA;    &lt;a href=&#34;https://golang.org/pkg/runtime/pprof&#34; target=&#34;_blank&#34;&gt;runtime/pprof&lt;/a&gt; provides profiling data&#xA;&#xA;&#xA;    in the format expected by the &lt;a href=&#34;https://code.google.com/p/gperftools&#34; target=&#34;_blank&#34;&gt;pprof&lt;/a&gt;&#xA;&#xA;&#xA;    profiling tool, while &lt;a href=&#34;https://golang.org/pkg/net/http/pprof&#34; target=&#34;_blank&#34;&gt;net/http/pprof&lt;/a&gt;&#xA;&#xA;&#xA;    provides HTTP endpoints to present profiling data in this format.&#xA;&#xA;&#xA;    Client code uses the package path to import the package, so there is no&#xA;&#xA;&#xA;    confusion.&#xA;&#xA;&#xA;    If a source file needs to import both &lt;code&gt;pprof&lt;/code&gt; packages, it can&#xA;&#xA;&#xA;    &lt;a href=&#34;https://golang.org/ref/spec#Import_declarations&#34; target=&#34;_blank&#34;&gt;rename&lt;/a&gt; one or both locally.&#xA;&#xA;&#xA;    When renaming an imported package, the local name should follow the same&#xA;&#xA;&#xA;    guidelines as package names (lower case, no &lt;code&gt;under_scores&lt;/code&gt; or &lt;code&gt;mixedCaps&lt;/code&gt;).&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_5.&#34;&gt;Bad package names&lt;/h4&gt;&#xA;  &#xA;  &#xA;  &lt;p&gt;&#xA;    Bad package names make code harder to navigate and maintain.&#xA;&#xA;&#xA;    Here are some guidelines for recognizing and fixing bad names.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    &lt;b&gt;Avoid meaningless package names.&lt;/b&gt;&#xA;&#xA;&#xA;    Packages named &lt;code&gt;util&lt;/code&gt;, &lt;code&gt;common&lt;/code&gt;, or &lt;code&gt;misc&lt;/code&gt; provide clients with no sense of what&#xA;&#xA;&#xA;    the package contains.&#xA;&#xA;&#xA;    This makes it harder for clients to use the package and makes it harder for&#xA;&#xA;&#xA;    maintainers to keep the package focused.&#xA;&#xA;&#xA;    Over time, they accumulate dependencies that can make compilation significantly&#xA;&#xA;&#xA;    and unnecessarily slower, especially in large programs.&#xA;&#xA;&#xA;    And since such package names are generic, they are more likely to collide with&#xA;&#xA;&#xA;    other packages imported by client code, forcing clients to invent names to&#xA;&#xA;&#xA;    distinguish them.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    &lt;b&gt;Break up generic packages.&lt;/b&gt;&#xA;&#xA;&#xA;    To fix such packages, look for types and functions with common name elements and&#xA;&#xA;&#xA;    pull them into their own package.&#xA;&#xA;&#xA;    For example, if you have&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;div class=&#34;code&#34;&gt;&lt;pre&gt;package util&#xA;func NewStringSet(...string) map[string]bool {...}&#xA;func SortStringSet(map[string]bool) []string {...}&lt;/pre&gt;&lt;/div&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    then client code looks like&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;div class=&#34;code&#34;&gt;&lt;pre&gt;set := util.NewStringSet(&amp;#34;c&amp;#34;, &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;)&#xA;fmt.Println(util.SortStringSet(set))&lt;/pre&gt;&lt;/div&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Pull these functions out of &lt;code&gt;util&lt;/code&gt; into a new package, choosing a name that fits&#xA;&#xA;&#xA;    the contents:&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;div class=&#34;code&#34;&gt;&lt;pre&gt;package stringset&#xA;func New(...string) map[string]bool {...}&#xA;func Sort(map[string]bool) []string {...}&lt;/pre&gt;&lt;/div&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    then the client code becomes&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;div class=&#34;code&#34;&gt;&lt;pre&gt;set := stringset.New(&amp;#34;c&amp;#34;, &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;)&#xA;fmt.Println(stringset.Sort(set))&lt;/pre&gt;&lt;/div&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    Once you&amp;#39;ve made this change, its easier to see how to improve the new package:&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;div class=&#34;code&#34;&gt;&lt;pre&gt;package stringset&#xA;type Set map[string]bool&#xA;func New(...string) Set {...}&#xA;func (s Set) Sort() []string {...}&lt;/pre&gt;&lt;/div&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    which yields even simpler client code:&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;div class=&#34;code&#34;&gt;&lt;pre&gt;set := stringset.New(&amp;#34;c&amp;#34;, &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;)&#xA;fmt.Println(set.Sort())&lt;/pre&gt;&lt;/div&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    The name of the package is a critical piece of its design.&#xA;&#xA;&#xA;    Work to eliminate meaningless package names from your projects.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    &lt;b&gt;Don&amp;#39;t use a single package for all your APIs.&lt;/b&gt;&#xA;&#xA;&#xA;    Many well-intentioned programmers put all the interfaces exposed by their&#xA;&#xA;&#xA;    program into a single package named &lt;code&gt;api&lt;/code&gt;, &lt;code&gt;types&lt;/code&gt;, or &lt;code&gt;interfaces&lt;/code&gt;, thinking it&#xA;&#xA;&#xA;    makes it easier to find the entry points to their code base.&#xA;&#xA;&#xA;    This is a mistake.&#xA;&#xA;&#xA;    Such packages suffer from the same problems as those named &lt;code&gt;util&lt;/code&gt; or &lt;code&gt;common&lt;/code&gt;,&#xA;&#xA;&#xA;    growing without bound, providing no guidance to users, accumulating&#xA;&#xA;&#xA;    dependencies, and colliding with other imports.&#xA;&#xA;&#xA;    Break them up, perhaps using directories to separate public packages from&#xA;&#xA;&#xA;    implementation.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;  &#xA;  &lt;p&gt;&#xA;    &lt;b&gt;Avoid unnecessary package name collisions.&lt;/b&gt;&#xA;&#xA;&#xA;    While packages in different directories may have the same name, packages that&#xA;&#xA;&#xA;    are frequently used together should have distinct names.&#xA;&#xA;&#xA;    This reduces confusion and the need for local renaming in client code.&#xA;&#xA;&#xA;    For the same reason, avoid using the same name as popular standard packages like&#xA;&#xA;&#xA;    &lt;code&gt;io&lt;/code&gt; or &lt;code&gt;http&lt;/code&gt;.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_6.&#34;&gt;Conclusion&lt;/h4&gt;&#xA;  &#xA;  &#xA;  &lt;p&gt;&#xA;    Package names are central to good naming in Go programs.&#xA;&#xA;&#xA;    Take the time to choose good package names and organize your code well.&#xA;&#xA;&#xA;    This helps clients understand and use your packages and helps maintainers to&#xA;&#xA;&#xA;    grow them gracefully.&#xA;  &lt;/p&gt;&#xA;  &#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_7.&#34;&gt;Further reading&lt;/h4&gt;&#xA;  &#xA;  &lt;ul&gt;&#xA;  &#xA;    &lt;li&gt;&lt;a href=&#34;https://golang.org/doc/effective_go.html&#34; target=&#34;_blank&#34;&gt;Effective Go&lt;/a&gt;&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;&lt;a href=&#34;https://golang.org/doc/code.html&#34; target=&#34;_blank&#34;&gt;How to Write Go Code&lt;/a&gt;&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;&lt;a href=&#34;https://blog.golang.org/organizing-go-code&#34; target=&#34;_blank&#34;&gt;Organizing Go Code (2012 blog post)&lt;/a&gt;&lt;/li&gt;&#xA;  &#xA;    &lt;li&gt;&lt;a href=&#34;https://talks.golang.org/2014/organizeio.slide&#34; target=&#34;_blank&#34;&gt;Organizing Go Code (2014 Google I/O talk)&lt;/a&gt;&lt;/li&gt;&#xA;  &#xA;  &lt;/ul&gt;&#xA;&#xA;&#xA;    &#xA;  &#xA;&#xA;</content></entry></feed>